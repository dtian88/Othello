# Dennis Tian, 1/8/19

# import math
import random
import time

# import sys
# cc = 0
transposition_table = dict()
N = 8
black = 0x810000000
white = 0x1008000000
filled = 0xFFFFFFFFFFFFFFFF
corners = 0x8100000000000081
top_left_corner = 0x8000000000000000
top_right_corner = 0x100000000000000
bottom_left_corner = 0x80
bottom_right_corner = 1
edges = 0xFF818181818181FF
top_row = 0xFF00000000000000
bottom_row = 0xFF
leftmost_column = 0x8080808080808080
rightmost_column = 0x101010101010101
l_r_diagonal = 0x8040201008040201
r_l_diagonal = 0x102040810204080
top_left_x_square = 0x40000000000000
top_right_x_square = 0x2000000000000
bottom_left_x_square = 0x4000
bottom_right_x_square = 0x200
x_squares = 0x42000000004200
c_x_squares = 0x42C30000000C342
top_bottom_c_squares = 0x4200000000000042
left_right_c_squares = 0x81000000008100
base2To3 = [int(bin(i)[2:], 3) for i in range(1024)]
shifts = [(0x7F7F7F7F7F7F7F7F, 1),  # right
          (0x007F7F7F7F7F7F7F, 9),  # down, right
          (0xFFFFFFFFFFFFFFFF, 8),  # down
          (0x00FEFEFEFEFEFEFE, 7),  # down, left
          (0xFEFEFEFEFEFEFEFE, 1),  # left
          (0xFEFEFEFEFEFEFE00, 9),  # up, left
          (0xFFFFFFFFFFFFFFFF, 8),  # up
          (0x7F7F7F7F7F7F7F00, 7)]  # up, right

index_to_bit = [0x8000000000000000, 0x4000000000000000, 0x2000000000000000, 0x1000000000000000, 0x800000000000000,
                0x400000000000000, 0x200000000000000, 0x100000000000000, 0x80000000000000, 0x40000000000000,
                0x20000000000000, 0x10000000000000, 0x8000000000000, 0x4000000000000, 0x2000000000000, 0x1000000000000,
                0x800000000000, 0x400000000000, 0x200000000000, 0x100000000000, 0x80000000000, 0x40000000000,
                0x20000000000, 0x10000000000, 0x8000000000, 0x4000000000, 0x2000000000, 0x1000000000, 0x800000000,
                0x400000000, 0x200000000, 0x100000000, 0x80000000, 0x40000000, 0x20000000, 0x10000000, 0x8000000,
                0x4000000, 0x2000000, 0x1000000, 0x800000, 0x400000, 0x200000, 0x100000, 0x80000, 0x40000, 0x20000,
                0x10000, 0x8000, 0x4000, 0x2000, 0x1000, 0x800, 0x400, 0x200, 0x100, 0x80, 0x40, 0x20, 0x10, 8, 4, 2, 1]

neighbors = {0: 0x40C0000000000000, 1: 0xA0E0000000000000, 2: 0x5070000000000000, 3: 0x2838000000000000,
             4: 0x141C000000000000, 5: 0xA0E000000000000, 6: 0x507000000000000, 7: 0x203000000000000,
             8: 0xC040C00000000000, 9: 0xE0A0E00000000000, 10: 0x7050700000000000, 11: 0x3828380000000000,
             12: 0x1C141C0000000000, 13: 0xE0A0E0000000000, 14: 0x705070000000000, 15: 0x302030000000000,
             16: 0xC040C000000000, 17: 0xE0A0E000000000, 18: 0x70507000000000, 19: 0x38283800000000,
             20: 0x1C141C00000000, 21: 0xE0A0E00000000, 22: 0x7050700000000, 23: 0x3020300000000, 24: 0xC040C0000000,
             25: 0xE0A0E0000000, 26: 0x705070000000, 27: 0x382838000000, 28: 0x1C141C000000, 29: 0xE0A0E000000,
             30: 0x70507000000, 31: 0x30203000000, 32: 0xC040C00000, 33: 0xE0A0E00000, 34: 0x7050700000,
             35: 0x3828380000, 36: 0x1C141C0000, 37: 0xE0A0E0000, 38: 0x705070000, 39: 0x302030000, 40: 0xC040C000,
             41: 0xE0A0E000, 42: 0x70507000, 43: 0x38283800, 44: 0x1C141C00, 45: 0xE0A0E00, 46: 0x7050700,
             47: 0x3020300, 48: 0xC040C0, 49: 0xE0A0E0, 50: 0x705070, 51: 0x382838, 52: 0x1C141C, 53: 0xE0A0E,
             54: 0x70507, 55: 0x30203, 56: 0xC040, 57: 0xE0A0, 58: 0x7050, 59: 0x3828, 60: 0x1C14, 61: 0xE0A, 62: 0x705,
             63: 0x302}

openings = {(0x810000000, 0x1008000000): [34, 43, 56, 65], (0x101810000000, 0x8000000): [33, 53],
            (0x100810000000, 0x201008000000): [43], (0x103810000000, 0x200008000000): [35, 53],
            (0x3010000000, 0x380808000000): [24, 46], (0x10103010000000, 0x280808000000): [42],
            (0x10100010000000, 0x287808000000): [46], (0x10180410000000, 0x207808000000): [23],
            (0x10080410000000, 0x20307808000000): [53, 56], (0x10702010000000, 0x85808000000): [14],
            (0x603c10000000, 0x1010184008000000): [56], (0x8703410000000, 0x101008480c000000): [15],
            (0x408703410000000, 0x181008480c000000): [23], (0x4783410000000, 0x181800480c000000): [36],
            (0x8702010000000, 0x1010085808000000): [23], (0x8603c10000000, 0x1030184008000000): [36],
            (0x10702000000000, 0x85838000000): [36], (0x10702000000000, 0x85818100000): [36],
            (0x8702010000000, 0x1010085808000000): [23], (0x8603c10000000, 0x1030184008000000): [36],
            (0x10102050000000, 0x285808000000): [23], (0x10003010000000, 0x20380808000000): [25],
            (0x18100010000000, 0x20287808000000): [36], (0x10100000000000, 0x283838000000): [52],
            (0x3c10000000, 0x380008000000): [53], (0xc00000000, 0x383038000000): [25],
            (0x7c00000000, 0x380038000000): [36, 56], (0xc10200000, 0x383028000000): [64],
            (0x2c00000000, 0x381018100000): [65], (0xc18080000, 0x387000100000): [63],
            (0x2418080000, 0x381804100000): [36], (0x42018080000, 0x381e04100000): [24],
            (0x40203010000000, 0x180808000000): [64], (0x20203010000000, 0x180808000000): [64],
            (0x28302000000000, 0x81818100000): [24], (0x838202000000000, 0x181818100000): [16],
            (0x8303c2000000000, 0x408001818100000): [14], (0x283c2000000000, 0x10001818100000): [46],
            (0x1038342000000000, 0x81c18100000): [37], (0x283c2818080000, 0x10001400100000): [26],
            (0x28203c00000000, 0x10180018100000): [36], (0x8103010000000, 0x280808000000): [42],
            (0x4083010000000, 0x300808000000): [53], (0x43810000000, 0x380008000000): [64],
            (0x301c000000, 0x380800000000): [53], (0x3018040000, 0x380800000000): [52],
            (0x41818040000, 0x382040000000): [53], (0x700810000000, 0x1008000000): [35],
            (0x10081c000000, 0x201000000000): [24], (0x100818080000, 0x201000000000): [24],
            (0x101800000000, 0x38000000): [65, 66], (0x101820400000, 0x18000000): [36],
            (0x101810200000, 0x28000000): [35], (0x101810100000, 0x28000000): [35],
            (0x1c0810100000, 0x1028000000): [25], (0x100418100000, 0x81820000000): [63],
            (0x1c0408100000, 0x1830200000): [24], (0x100c0c100000, 0x81030200000): [33],
            (0x3c0c100000, 0x380030200000): [52], (0x7c2c100000, 0x380050200000): [62],
            (0x8081c0c100000, 0x302070200000): [65], (0x28181c0c000000, 0x202070380000): [24],
            (0x18181c0c000000, 0x202070380000): [66], (0x18780c04000000, 0x30783c0000): [57],
            (0x18787c00000000, 0x7e3c0000): [37], (0x4081c0c100000, 0x302070200000): [65],
            (0x4081c0c080800, 0x302070300000): [76], (0x14181c0c000000, 0x202070380000): [66],
            (0x14180c0c080800, 0x203070340000): [76], (0x103c08100000, 0x80030200000): [33],
            (0x100478100000, 0x81800200000): [43], (0x10081c100000, 0x81020000000): [46],
            (0x101808080000, 0x30000000): [24, 56], (0x808080000, 0x10101030000000): [33, 63],
            (0x818280000, 0x10101020000000): [64], (0x808280000, 0x10101030100000): [33, 52, 73],
            (0x201808280000, 0x10100030100000): [35], (0x878280000, 0x10101000100000): [56],
            (0x78280000, 0x10101804100000): [75], (0x78380800, 0x10101804000000): [66],
            (0x70380800, 0x1010180c040000): [46], (0x478380800, 0x10101804040000): [36, 74],
            (0x78380800, 0x10141c04040000): [47], (0x808382000, 0x10101030000000): [66],
            (0x103810080000, 0x2c000000): [35], (0x101810180000, 0x2c000000): [35],
            (0x100418180000, 0x81824000000): [36], (0x10081c1a0000, 0xc1420000000): [63],
            (0x101800080000, 0x3c000000): [66], (0x1018080c0000, 0x34000000): [35],
            (0x101808000000, 0x340c0400): [63], (0x1008080c0000, 0x81034000000): [64],
            (0x3018080c0000, 0x80034000000): [36], (0x301c0c0c0000, 0xc0030000000): [75],
            (0x3030180c0000, 0xc0824000000): [42], (0x7020180c0000, 0xc5824000000): [64],
            (0x3020780c0000, 0xc5804000000): [23], (0xa060780c0000, 0x201c1804000000): [32],
            (0x10b070780c0000, 0x204c0804000000): [13], (0x810b070780c0000, 0x20204c0804000000): [25],
            (0xc08b070780c0000, 0x20304c0804000000): [14], (0x7c20b070780c0000, 0x184c0804000000): [64],
            (0x7c20a060681c0800, 0x185c1814000000): [41], (0x100c0c0c0000, 0x81030000000): [36],
            (0x1038180c0000, 0x80024000000): [76], (0x1018181c0000, 0x80024000000): [76],
            (0x101010040000, 0x8082c180800): [76], (0x101818180000, 0x80024040400): [67],
            (0x10181c1e0000, 0x80020000400): [43, 46, 75], (0x10180c160000, 0x82030080400): [63],
            (0x10181c360000, 0x82020080400): [75], (0x1018181a0000, 0x80424040400): [57],
            (0x10181e1a0000, 0x80420040400): [63], (0x10181e020000, 0x804203c0400): [75],
            (0x101014060000, 0x80828180c00): [46], (0x101c14060000, 0x80028180c00): [43],
            (0x101c04060000, 0x82038180c00): [63], (0x101c143e0000, 0x82028000c00): [25, 33],
            (0x1c143e0000, 0x8182028000c00): [33], (0xc143e0000, 0x383028000c00): [84],
            (0xc143e0810, 0x383028000400): [85], (0xc14360010, 0x383028080c08): [74],
            (0xc143e1010, 0x383028000c08): [83], (0xc143e1000, 0x383028000c38): [52],
            (0xc743e1000, 0x383008000c38): [51, 62], (0xc043e1000, 0x3830f8000c38): [25, 32],
            (0xc543e1000, 0x383028400c38): [42], (0x7c743e1000, 0x380008400c38): [36, 41, 58, 61],
            (0x808040000, 0x10101030000000): [63], (0x101808040000, 0x30000000): [56],
            (0x101800040000, 0x3c000000): [65], (0x101010000000, 0x80808000000): [46],
            (0xc10000000, 0x381008000000): [56], (0x101810000000, 0xa0408000000): [47],
            (0x100c00000000, 0x81038000000): [36], (0x101810000000, 0x8040a000000): [47]}

edge_configurations_5 = {(0xA8, 0x50): (0, 0x40), (0x50, 0xA8): (0x40, 0), (0x68, 0x14): (0, 0x10),
                         (0x58, 0x24): (0, 0x20), (0x54, 0x28): (0x10, 0x20), (0x50, 0x2C): (0, 0x20),
                         (0x48, 0x34): (0, 0x30), (0x34, 0x48): (0x30, 0), (0x2C, 0x50): (0x20, 0),
                         (0x28, 0x54): (0x20, 0x10), (0x24, 0x58): (0x20, 0), (0x14, 0x68): (0x10, 0),
                         (0x34, 0xA): (4, 0), (0x2C, 0x12): (0xC, 0), (0x2A, 0x14): (8, 4), (0x28, 0x16): (8, 0),
                         (0x24, 0x1A): (4, 0), (0x1A, 0x24): (0, 4), (0x16, 0x28): (0, 8), (0x14, 0x2A): (4, 8),
                         (0x12, 0x2C): (0, 0xC), (0xA, 0x34): (0, 4), (0x15, 0xA): (0, 2), (0xA, 0x15): (2, 0),
                         (0xA0, 0x54): (0, 0x40), (0x54, 0xA0): (0x40, 0), (0x6A, 0x10): (0, 0x10),
                         (0x5A, 0x20): (0, 0x20), (0x52, 0x28): (0, 0x20), (0x50, 0x2A): (0x10, 0x20),
                         (0x4A, 0x30): (0, 0x30), (0x30, 0x4A): (0x30, 0), (0x2A, 0x50): (0x20, 0x10),
                         (0x28, 0x52): (0x20, 0), (0x20, 0x5A): (0x20, 0), (0x10, 0x6A): (0x10, 0),
                         (0x29, 0x14): (8, 0), (0x28, 0x15): (8, 0), (0x15, 0x28): (0, 8), (0x14, 0x29): (0, 8),
                         (0x56, 0x20): (0, 0x20), (0x52, 0x24): (0, 0x20), (0x24, 0x52): (0x20, 0),
                         (0x20, 0x56): (0x20, 0), (0x6A, 4): (0, 4), (0x4A, 0x24): (0, 4), (0x24, 0x4A): (4, 0),
                         (4, 0x6A): (4, 0), (0xA8, 0x14): (0, 0x10), (0x94, 0x28): (0x10, 0), (0x28, 0x94): (0, 0x10),
                         (0x14, 0xA8): (0x10, 0), (0x5A, 4): (0, 4), (0x56, 8): (0, 8), (0x54, 0xA): (4, 8),
                         (0x52, 0xC): (0, 0xC), (0x4A, 0x14): (0, 4), (0x14, 0x4A): (4, 0), (0xC, 0x52): (0xC, 0),
                         (0xA, 0x54): (8, 4), (8, 0x56): (8, 0), (4, 0x5A): (4, 0), (0xA2, 0x50): (0, 0x40),
                         (0x50, 0xA2): (0x40, 0), (0x51, 0x28): (0, 0x20), (0x50, 0x29): (0, 0x20),
                         (0x29, 0x50): (0x20, 0), (0x28, 0x51): (0x20, 0), (0x94, 0xA): (4, 0), (0x8A, 0x14): (0, 4),
                         (0x14, 0x8A): (4, 0), (0xA, 0x94): (0, 4), (0x45, 0xA): (0, 2), (0xA, 0x45): (2, 0)}

edge_configurations_5_old = {(0xa8, 0x50): (0, 0x40), (0x50, 0xa8): (0x40, 0), (0xa0, 0x54): (0, 0x40),
                             (0x54, 0xa0): (0x40, 0), (0xa8, 0x14): (0, 0x20), (0x14, 0xa8): (0x20, 0),
                             (0x54, 0x28): (0x10, 0x20), (0x28, 0x54): (0x20, 0x10), (0x50, 0x2C): (0, 0x20),
                             (0x2C, 0x50): (0x20, 0), (0xa2, 0x50): (0, 0x40), (0x50, 0xa2): (0x40, 0),
                             (0xaa, 0x40): (0, 0x40), (0x40, 0xaa): (0x40, 0), (0x90, 0x2a): (0x10, 0),
                             (0x2a, 0x90): (0, 0x10), (0xaa, 0x10): (0, 0x10), (0x10, 0xaa): (0x10, 0),
                             (0x50, 0x2a): (0x10, 0x20), (0x2a, 0x50): (0x20, 0x10), (0x5a, 0x20): (0, 0x20),
                             (0x20, 0x5a): (0x20, 0), (0x52, 0x28): (0, 0x20), (0x28, 0x52): (0x20, 0),
                             (0x4a, 0x30): (0, 0x30), (0x30, 0x4a): (0x30, 0), (0x6a, 0x10): (0, 0x10),
                             (0x10, 0x6a): (0x10, 0), (0x56, 0x20): (0, 0x20), (0x20, 0x56): (0x20, 0),
                             (0x52, 0x24): (0, 0x20), (0x24, 0x52): (0x20, 0), (0xAA, 4): (0, 4), (4, 0xAA): (4, 0),
                             (0x2a, 0x84): (0, 4), (0x84, 0x2a): (4, 0), (0x8a, 0x14): (0, 4), (0x14, 0x8a): (4, 0),
                             (0xa, 0x94): (0, 4), (0x94, 0xa): (4, 0)}

edge_configurations_6 = {(0xE8, 0x14): (0, 0x10), (0x14, 0xE8): (0x10, 0), (0xD8, 0x24): (0, 0x20),
                         (0x24, 0xD8): (0x20, 0), (0xD0, 0x2C): (0, 0x20), (0x2C, 0xD0): (0x20, 0),
                         (0xD4, 0x28): (0x10, 0x20), (0x28, 0xD4): (0x20, 0x10), (0xC8, 0x34): (0, 0x30),
                         (0x34, 0xC8): (0x30, 0), (0xB4, 0x48): (0x30, 0x40), (0x48, 0xB4): (0x40, 0x30),
                         (0xB8, 0x44): (0, 0x40), (0x44, 0xB8): (0x40, 0), (0xB0, 0x4C): (0, 0x40),
                         (0x4C, 0xB0): (0x40, 0), (0xAC, 0x50): (0x20, 0x40), (0x50, 0xAC): (0x40, 0x20),
                         (0xA0, 0x5C): (0, 0x40), (0x5C, 0xA0): (0x40, 0), (0xA8, 0x54): (0x20, 0x50),
                         (0x54, 0xA8): (0x50, 0x20), (0xA4, 0x58): (0x20, 0x40), (0x58, 0xA4): (0x40, 0x20),
                         (0x98, 0x64): (0, 0x60), (0x64, 0x98): (0x60, 0), (0x94, 0x68): (0x10, 0x60),
                         (0x68, 0x94): (0x60, 0x10), (0x90, 0x6C): (0, 0x60), (0x6C, 0x90): (0x60, 0),
                         (0x88, 0x74): (0, 0x70), (0x74, 0x88): (0x70, 0), (0xEA, 0x10): (0, 0x10),
                         (0x10, 0xEA): (0x10, 0), (0xCA, 0x30): (0, 0x30), (0x30, 0xCA): (0x30, 0),
                         (0x8A, 0x70): (0, 0x70), (0x70, 0x8A): (0x70, 0), (0xDA, 0x20): (0, 0x20),
                         (0x20, 0xDA): (0x20, 0), (0x9A, 0x60): (0, 0x60), (0x60, 0x9A): (0x60, 0),
                         (0xBA, 0x40): (0, 0x40), (0x40, 0xBA): (0x40, 0), (0xD2, 0x28): (0, 0x20),
                         (0x28, 0xD2): (0x20, 0), (0xD0, 0x2A): (0x10, 0x20), (0x2A, 0xD0): (0x20, 0x10),
                         (0xB2, 0x48): (0, 0x40), (0x48, 0xB2): (0x40, 0), (0xB0, 0x4A): (0x30, 0x40),
                         (0x4A, 0xB0): (0x40, 0x30), (0xAA, 0x50): (0x30, 0x40), (0x50, 0xAA): (0x40, 0x30),
                         (0xA8, 0x52): (0x20, 0x40), (0x52, 0xA8): (0x40, 0x20), (0xA2, 0x58): (0, 0x40),
                         (0x58, 0xA2): (0x40, 0), (0xA0, 0x5A): (0x20, 0x40), (0x5A, 0xA0): (0x40, 0x20),
                         (0x92, 0x68): (0, 0x60), (0x68, 0x92): (0x60, 0), (0x90, 0x6A): (0x10, 0x60),
                         (0x6A, 0x90): (0x60, 0x10), (0xD6, 0x20): (0, 0x20), (0x20, 0xD6): (0x20, 0),
                         (0xD2, 0x24): (0, 0x20), (0x24, 0xD2): (0x20, 0), (0xB6, 0x40): (0, 0x40),
                         (0x40, 0xB6): (0x40, 0), (0xB2, 0x44): (0, 0x40), (0x44, 0xB2): (0x40, 0),
                         (0xA6, 0x50): (0, 0x40), (0x50, 0xA6): (0x40, 0), (0xA4, 0x52): (0x20, 0x40),
                         (0x52, 0xA4): (0x40, 0x20), (0xA2, 0x54): (0, 0x40), (0x54, 0xA2): (0x40, 0),
                         (0xA0, 0x56): (0x20, 0x40), (0x56, 0xA0): (0x40, 0x20), (0x96, 0x60): (0, 0x60),
                         (0x60, 0x96): (0x60, 0), (0x92, 0x64): (0, 0x60), (0x64, 0x92): (0x60, 0), (0xEA, 4): (0, 4),
                         (4, 0xEA): (4, 0), (0xE4, 0xA): (4, 0), (0xA, 0xE4): (0, 4), (0xCA, 0x24): (0, 4),
                         (0x24, 0xCA): (4, 0), (0xC4, 0x2A): (4, 0), (0x2A, 0xC4): (0, 4), (0xAE, 0x40): (0, 0x40),
                         (0x40, 0xAE): (0x40, 0), (0xAA, 0x44): (0, 0x44), (0x44, 0xAA): (0x44, 0),
                         (0xA6, 0x48): (0, 0x40), (0x48, 0xA6): (0x40, 0), (0xA4, 0x4A): (4, 0x40),
                         (0x4A, 0xA4): (0x40, 4), (0xA2, 0x4C): (0, 0x40), (0x4C, 0xA2): (0x40, 0),
                         (0x8A, 0x64): (0, 4), (0x64, 0x8A): (4, 0), (0x84, 0x6A): (4, 0), (0x6A, 0x84): (0, 4),
                         (0xD6, 8): (0, 8), (8, 0xD6): (8, 0), (0x96, 0x48): (0, 8), (0x48, 0x96): (8, 0),
                         (0x56, 0x88): (0, 8), (0x88, 0x56): (8, 0), (0x16, 0xC8): (0, 8), (0xC8, 0x16): (8, 0),
                         (0xDA, 0x4): (0, 4), (0x4, 0xDA): (4, 0), (0x9A, 0x44): (0, 4), (0x44, 0x9A): (4, 0),
                         (0x5A, 0x84): (0, 4), (0x84, 0x5A): (4, 0), (0x1A, 0xC4): (0, 4), (0xC4, 0x1A): (4, 0),
                         (0xD2, 0xC): (0, 0xC), (0xC, 0xD2): (0xC, 0), (0x92, 0x4C): (0, 0xC), (0x4C, 0x92): (0xC, 0),
                         (0x52, 0x8C): (0, 0xC), (0x8C, 0x52): (0xC, 0), (0x12, 0xCC): (0, 0xC), (0xCC, 0x12): (0xC, 0),
                         (0xCA, 0x14): (8, 4), (0x14, 0xCA): (4, 8), (0x8A, 0x54): (8, 4), (0x54, 0x8A): (4, 8),
                         (0x4A, 0x94): (8, 4), (0x94, 0x4A): (4, 8), (0xA, 0xD4): (8, 4), (0xD4, 0xA): (4, 8),
                         (0xAE, 0x10): (0, 0x10), (0x10, 0xAE): (0x10, 0), (0x2E, 0x90): (0, 0x10),
                         (0x90, 0x2E): (0x10, 0), (0xB6, 8): (0, 8), (8, 0xB6): (8, 0), (0x36, 0x88): (0, 8),
                         (0x88, 0x36): (8, 0), (0x96, 0x28): (0x10, 8), (0x28, 0x96): (8, 0x10),
                         (0x16, 0xA8): (0x10, 8), (0xA8, 0x16): (8, 0x10), (0xA6, 0x18): (0, 0x18),
                         (0x18, 0xA6): (0x18, 0), (0x26, 0x98): (0, 0x18), (0x98, 0x26): (0x18, 0), (0xBA, 4): (0, 4),
                         (4, 0xBA): (4, 0), (0x3A, 0x84): (0, 4), (0x84, 0x3A): (4, 0), (0x9A, 0x24): (0x18, 4),
                         (0x24, 0x9A): (4, 0x18), (0x1A, 0xA4): (0x18, 4), (0xA4, 0x1A): (4, 0x18),
                         (0xAA, 0x14): (8, 0x14), (0x14, 0xAA): (0x14, 8), (0x2A, 0x94): (8, 0x14),
                         (0x94, 0x2A): (0x14, 8), (0x8A, 0x34): (8, 4), (0x34, 0x8A): (4, 8), (0xA, 0xB4): (8, 4),
                         (0xB4, 0xA): (4, 8), (0xB2, 0xC): (0, 0xC), (0xC, 0xB2): (0xC, 0), (0x32, 0x8C): (0, 0xC),
                         (0x8C, 0x32): (0xC, 0), (0x92, 0x2C): (0x10, 0xC), (0x2C, 0x92): (0xC, 0x10),
                         (0x12, 0xAC): (0x10, 0xC), (0xAC, 0x12): (0xC, 0x10), (0xA2, 0x1C): (0, 0x1C),
                         (0x1C, 0xA2): (0x1C, 0), (0x22, 0x9C): (0, 0x1C), (0x9C, 0x22): (0x1C, 0),
                         (0x7A, 0x4): (0x0, 0x4), (0x76, 0x8): (0x0, 0x8), (0x74, 0xA): (0x4, 0x8),
                         (0x72, 0xC): (0x0, 0xC), (0x6E, 0x10): (0x0, 0x10), (0x6C, 0x12): (0xC, 0x10),
                         (0x6A, 0x14): (0x8, 0x14), (0x68, 0x16): (0x8, 0x10), (0x66, 0x18): (0x0, 0x18),
                         (0x64, 0x1A): (0x4, 0x18), (0x62, 0x1C): (0x0, 0x1C), (0x5E, 0x20): (0x0, 0x20),
                         (0x5C, 0x22): (0x1C, 0x20), (0x5A, 0x24): (0x18, 0x24), (0x58, 0x26): (0x18, 0x20),
                         (0x56, 0x28): (0x10, 0x28), (0x54, 0x2A): (0x14, 0x28), (0x52, 0x2C): (0x10, 0x2C),
                         (0x50, 0x2E): (0x10, 0x20), (0x4E, 0x30): (0x0, 0x30), (0x4C, 0x32): (0xC, 0x30),
                         (0x4A, 0x34): (0x8, 0x34), (0x48, 0x36): (0x8, 0x30), (0x46, 0x38): (0x0, 0x38),
                         (0x44, 0x3A): (0x4, 0x38), (0x42, 0x3C): (0x0, 0x3C), (0x3C, 0x42): (0x3C, 0x0),
                         (0x3A, 0x44): (0x38, 0x4), (0x38, 0x46): (0x38, 0x0), (0x36, 0x48): (0x30, 0x8),
                         (0x34, 0x4A): (0x34, 0x8), (0x32, 0x4C): (0x30, 0xC), (0x30, 0x4E): (0x30, 0x0),
                         (0x2E, 0x50): (0x20, 0x10), (0x2C, 0x52): (0x2C, 0x10), (0x2A, 0x54): (0x28, 0x14),
                         (0x28, 0x56): (0x28, 0x10), (0x26, 0x58): (0x20, 0x18), (0x24, 0x5A): (0x24, 0x18),
                         (0x22, 0x5C): (0x20, 0x1C), (0x20, 0x5E): (0x20, 0x0), (0x1C, 0x62): (0x1C, 0x0),
                         (0x1A, 0x64): (0x18, 0x4), (0x18, 0x66): (0x18, 0x0), (0x16, 0x68): (0x10, 0x8),
                         (0x14, 0x6A): (0x14, 0x8), (0x12, 0x6C): (0x10, 0xC), (0x10, 0x6E): (0x10, 0x0),
                         (0xC, 0x72): (0xC, 0x0), (0xA, 0x74): (0x8, 0x4), (0x8, 0x76): (0x8, 0x0),
                         (0x4, 0x7A): (0x4, 0x0)}

edge_configurations_7 = {(0x7D, 0x2): (0x0, 0x2), (0x7B, 0x4): (0x0, 0x4), (0x7A, 0x5): (0x2, 0x4),
                         (0x79, 0x6): (0x0, 0x6), (0x77, 0x8): (0x0, 0x8), (0x76, 0x9): (0x6, 0x8),
                         (0x75, 0xA): (0x4, 0xA), (0x74, 0xB): (0x4, 0x8), (0x73, 0xC): (0x0, 0xC),
                         (0x72, 0xD): (0x2, 0xC), (0x71, 0xE): (0x0, 0xE), (0x6F, 0x10): (0x0, 0x10),
                         (0x6E, 0x11): (0xE, 0x10), (0x6D, 0x12): (0xC, 0x12), (0x6C, 0x13): (0xC, 0x10),
                         (0x6B, 0x14): (0x8, 0x14), (0x6A, 0x15): (0xA, 0x14), (0x69, 0x16): (0x8, 0x16),
                         (0x68, 0x17): (0x8, 0x10), (0x67, 0x18): (0x0, 0x18), (0x66, 0x19): (0x6, 0x18),
                         (0x65, 0x1A): (0x4, 0x1A), (0x64, 0x1B): (0x4, 0x18), (0x63, 0x1C): (0x0, 0x1C),
                         (0x62, 0x1D): (0x2, 0x1C), (0x61, 0x1E): (0x0, 0x1E), (0x5F, 0x20): (0x0, 0x20),
                         (0x5E, 0x21): (0x1E, 0x20), (0x5D, 0x22): (0x1C, 0x22), (0x5C, 0x23): (0x1C, 0x20),
                         (0x5B, 0x24): (0x18, 0x24), (0x5A, 0x25): (0x1A, 0x24), (0x59, 0x26): (0x18, 0x26),
                         (0x58, 0x27): (0x18, 0x20), (0x57, 0x28): (0x10, 0x28), (0x56, 0x29): (0x16, 0x28),
                         (0x55, 0x2A): (0x14, 0x2A), (0x54, 0x2B): (0x14, 0x28), (0x53, 0x2C): (0x10, 0x2C),
                         (0x52, 0x2D): (0x12, 0x2C), (0x51, 0x2E): (0x10, 0x2E), (0x50, 0x2F): (0x10, 0x20),
                         (0x4F, 0x30): (0x0, 0x30), (0x4E, 0x31): (0xE, 0x30), (0x4D, 0x32): (0xC, 0x32),
                         (0x4C, 0x33): (0xC, 0x30), (0x4B, 0x34): (0x8, 0x34), (0x4A, 0x35): (0xA, 0x34),
                         (0x49, 0x36): (0x8, 0x36), (0x48, 0x37): (0x8, 0x30), (0x47, 0x38): (0x0, 0x38),
                         (0x46, 0x39): (0x6, 0x38), (0x45, 0x3A): (0x4, 0x3A), (0x44, 0x3B): (0x4, 0x38),
                         (0x43, 0x3C): (0x0, 0x3C), (0x42, 0x3D): (0x2, 0x3C), (0x41, 0x3E): (0x0, 0x3E),
                         (0x3E, 0x41): (0x3E, 0x0), (0x3D, 0x42): (0x3C, 0x2), (0x3C, 0x43): (0x3C, 0x0),
                         (0x3B, 0x44): (0x38, 0x4), (0x3A, 0x45): (0x3A, 0x4), (0x39, 0x46): (0x38, 0x6),
                         (0x38, 0x47): (0x38, 0x0), (0x37, 0x48): (0x30, 0x8), (0x36, 0x49): (0x36, 0x8),
                         (0x35, 0x4A): (0x34, 0xA), (0x34, 0x4B): (0x34, 0x8), (0x33, 0x4C): (0x30, 0xC),
                         (0x32, 0x4D): (0x32, 0xC), (0x31, 0x4E): (0x30, 0xE), (0x30, 0x4F): (0x30, 0x0),
                         (0x2F, 0x50): (0x20, 0x10), (0x2E, 0x51): (0x2E, 0x10), (0x2D, 0x52): (0x2C, 0x12),
                         (0x2C, 0x53): (0x2C, 0x10), (0x2B, 0x54): (0x28, 0x14), (0x2A, 0x55): (0x2A, 0x14),
                         (0x29, 0x56): (0x28, 0x16), (0x28, 0x57): (0x28, 0x10), (0x27, 0x58): (0x20, 0x18),
                         (0x26, 0x59): (0x26, 0x18), (0x25, 0x5A): (0x24, 0x1A), (0x24, 0x5B): (0x24, 0x18),
                         (0x23, 0x5C): (0x20, 0x1C), (0x22, 0x5D): (0x22, 0x1C), (0x21, 0x5E): (0x20, 0x1E),
                         (0x20, 0x5F): (0x20, 0x0), (0x1E, 0x61): (0x1E, 0x0), (0x1D, 0x62): (0x1C, 0x2),
                         (0x1C, 0x63): (0x1C, 0x0), (0x1B, 0x64): (0x18, 0x4), (0x1A, 0x65): (0x1A, 0x4),
                         (0x19, 0x66): (0x18, 0x6), (0x18, 0x67): (0x18, 0x0), (0x17, 0x68): (0x10, 0x8),
                         (0x16, 0x69): (0x16, 0x8), (0x15, 0x6A): (0x14, 0xA), (0x14, 0x6B): (0x14, 0x8),
                         (0x13, 0x6C): (0x10, 0xC), (0x12, 0x6D): (0x12, 0xC), (0x11, 0x6E): (0x10, 0xE),
                         (0x10, 0x6F): (0x10, 0x0), (0xE, 0x71): (0xE, 0x0), (0xD, 0x72): (0xC, 0x2),
                         (0xC, 0x73): (0xC, 0x0), (0xB, 0x74): (0x8, 0x4), (0xA, 0x75): (0xA, 0x4),
                         (0x9, 0x76): (0x8, 0x6), (0x8, 0x77): (0x8, 0x0), (0x6, 0x79): (0x6, 0x0),
                         (0x5, 0x7A): (0x4, 0x2), (0x4, 0x7B): (0x4, 0x0), (0x2, 0x7D): (0x2, 0x0),
                         (0xFA, 0x4): (0x0, 0x4), (0xF6, 0x8): (0x0, 0x8), (0xF4, 0xA): (0x4, 0x8),
                         (0xF2, 0xC): (0x0, 0xC), (0xEE, 0x10): (0x0, 0x10), (0xEC, 0x12): (0xC, 0x10),
                         (0xEA, 0x14): (0x8, 0x14), (0xE8, 0x16): (0x8, 0x10), (0xE6, 0x18): (0x0, 0x18),
                         (0xE4, 0x1A): (0x4, 0x18), (0xE2, 0x1C): (0x0, 0x1C), (0xDE, 0x20): (0x0, 0x20),
                         (0xDC, 0x22): (0x1C, 0x20), (0xDA, 0x24): (0x18, 0x24), (0xD8, 0x26): (0x18, 0x20),
                         (0xD6, 0x28): (0x10, 0x28), (0xD4, 0x2A): (0x14, 0x28), (0xD2, 0x2C): (0x10, 0x2C),
                         (0xD0, 0x2E): (0x10, 0x20), (0xCE, 0x30): (0x0, 0x30), (0xCC, 0x32): (0xC, 0x30),
                         (0xCA, 0x34): (0x8, 0x34), (0xC8, 0x36): (0x8, 0x30), (0xC6, 0x38): (0x0, 0x38),
                         (0xC4, 0x3A): (0x4, 0x38), (0xC2, 0x3C): (0x0, 0x3C), (0xBE, 0x40): (0x0, 0x40),
                         (0xBC, 0x42): (0x3C, 0x40), (0xBA, 0x44): (0x38, 0x44), (0xB8, 0x46): (0x38, 0x40),
                         (0xB6, 0x48): (0x30, 0x48), (0xB4, 0x4A): (0x34, 0x48), (0xB2, 0x4C): (0x30, 0x4C),
                         (0xB0, 0x4E): (0x30, 0x40), (0xAE, 0x50): (0x20, 0x50), (0xAC, 0x52): (0x2C, 0x50),
                         (0xAA, 0x54): (0x28, 0x54), (0xA8, 0x56): (0x28, 0x50), (0xA6, 0x58): (0x20, 0x58),
                         (0xA4, 0x5A): (0x24, 0x58), (0xA2, 0x5C): (0x20, 0x5C), (0xA0, 0x5E): (0x20, 0x40),
                         (0x9E, 0x60): (0x0, 0x60), (0x9C, 0x62): (0x1C, 0x60), (0x9A, 0x64): (0x18, 0x64),
                         (0x98, 0x66): (0x18, 0x60), (0x96, 0x68): (0x10, 0x68), (0x94, 0x6A): (0x14, 0x68),
                         (0x92, 0x6C): (0x10, 0x6C), (0x90, 0x6E): (0x10, 0x60), (0x8E, 0x70): (0x0, 0x70),
                         (0x8C, 0x72): (0xC, 0x70), (0x8A, 0x74): (0x8, 0x74), (0x88, 0x76): (0x8, 0x70),
                         (0x86, 0x78): (0x0, 0x78), (0x84, 0x7A): (0x4, 0x78), (0x82, 0x7C): (0x0, 0x7C),
                         (0x7C, 0x82): (0x7C, 0x0), (0x7A, 0x84): (0x78, 0x4), (0x78, 0x86): (0x78, 0x0),
                         (0x76, 0x88): (0x70, 0x8), (0x74, 0x8A): (0x74, 0x8), (0x72, 0x8C): (0x70, 0xC),
                         (0x70, 0x8E): (0x70, 0x0), (0x6E, 0x90): (0x60, 0x10), (0x6C, 0x92): (0x6C, 0x10),
                         (0x6A, 0x94): (0x68, 0x14), (0x68, 0x96): (0x68, 0x10), (0x66, 0x98): (0x60, 0x18),
                         (0x64, 0x9A): (0x64, 0x18), (0x62, 0x9C): (0x60, 0x1C), (0x60, 0x9E): (0x60, 0x0),
                         (0x5E, 0xA0): (0x40, 0x20), (0x5C, 0xA2): (0x5C, 0x20), (0x5A, 0xA4): (0x58, 0x24),
                         (0x58, 0xA6): (0x58, 0x20), (0x56, 0xA8): (0x50, 0x28), (0x54, 0xAA): (0x54, 0x28),
                         (0x52, 0xAC): (0x50, 0x2C), (0x50, 0xAE): (0x50, 0x20), (0x4E, 0xB0): (0x40, 0x30),
                         (0x4C, 0xB2): (0x4C, 0x30), (0x4A, 0xB4): (0x48, 0x34), (0x48, 0xB6): (0x48, 0x30),
                         (0x46, 0xB8): (0x40, 0x38), (0x44, 0xBA): (0x44, 0x38), (0x42, 0xBC): (0x40, 0x3C),
                         (0x40, 0xBE): (0x40, 0x0), (0x3C, 0xC2): (0x3C, 0x0), (0x3A, 0xC4): (0x38, 0x4),
                         (0x38, 0xC6): (0x38, 0x0), (0x36, 0xC8): (0x30, 0x8), (0x34, 0xCA): (0x34, 0x8),
                         (0x32, 0xCC): (0x30, 0xC), (0x30, 0xCE): (0x30, 0x0), (0x2E, 0xD0): (0x20, 0x10),
                         (0x2C, 0xD2): (0x2C, 0x10), (0x2A, 0xD4): (0x28, 0x14), (0x28, 0xD6): (0x28, 0x10),
                         (0x26, 0xD8): (0x20, 0x18), (0x24, 0xDA): (0x24, 0x18), (0x22, 0xDC): (0x20, 0x1C),
                         (0x20, 0xDE): (0x20, 0x0), (0x1C, 0xE2): (0x1C, 0x0), (0x1A, 0xE4): (0x18, 0x4),
                         (0x18, 0xE6): (0x18, 0x0), (0x16, 0xE8): (0x10, 0x8), (0x14, 0xEA): (0x14, 0x8),
                         (0x12, 0xEC): (0x10, 0xC), (0x10, 0xEE): (0x10, 0x0), (0xC, 0xF2): (0xC, 0x0),
                         (0xA, 0xF4): (0x8, 0x4), (0x8, 0xF6): (0x8, 0x0), (0x4, 0xFA): (0x4, 0x0),
                         (0xF5, 0x8): (0x0, 0x8), (0xF4, 0x9): (0x0, 0x8), (0xED, 0x10): (0x0, 0x10),
                         (0xEC, 0x11): (0x0, 0x10), (0xE9, 0x14): (0x8, 0x10), (0xE8, 0x15): (0x8, 0x10),
                         (0xE5, 0x18): (0x0, 0x18), (0xE4, 0x19): (0x0, 0x18), (0xDD, 0x20): (0x0, 0x20),
                         (0xDC, 0x21): (0x0, 0x20), (0xD9, 0x24): (0x18, 0x20), (0xD8, 0x25): (0x18, 0x20),
                         (0xD5, 0x28): (0x10, 0x28), (0xD4, 0x29): (0x10, 0x28), (0xD1, 0x2C): (0x10, 0x20),
                         (0xD0, 0x2D): (0x10, 0x20), (0xCD, 0x30): (0x0, 0x30), (0xCC, 0x31): (0x0, 0x30),
                         (0xC9, 0x34): (0x8, 0x30), (0xC8, 0x35): (0x8, 0x30), (0xC5, 0x38): (0x0, 0x38),
                         (0xC4, 0x39): (0x0, 0x38), (0xBD, 0x40): (0x0, 0x40), (0xBC, 0x41): (0x0, 0x40),
                         (0xB9, 0x44): (0x38, 0x40), (0xB8, 0x45): (0x38, 0x40), (0xB5, 0x48): (0x30, 0x48),
                         (0xB4, 0x49): (0x30, 0x48), (0xB1, 0x4C): (0x30, 0x40), (0xB0, 0x4D): (0x30, 0x40),
                         (0xAD, 0x50): (0x20, 0x50), (0xAC, 0x51): (0x20, 0x50), (0xA9, 0x54): (0x28, 0x50),
                         (0xA8, 0x55): (0x28, 0x50), (0xA5, 0x58): (0x20, 0x58), (0xA4, 0x59): (0x20, 0x58),
                         (0xA1, 0x5C): (0x20, 0x40), (0xA0, 0x5D): (0x20, 0x40), (0x9D, 0x60): (0x0, 0x60),
                         (0x9C, 0x61): (0x0, 0x60), (0x99, 0x64): (0x18, 0x60), (0x98, 0x65): (0x18, 0x60),
                         (0x95, 0x68): (0x10, 0x68), (0x94, 0x69): (0x10, 0x68), (0x91, 0x6C): (0x10, 0x60),
                         (0x90, 0x6D): (0x10, 0x60), (0x8D, 0x70): (0x0, 0x70), (0x8C, 0x71): (0x0, 0x70),
                         (0x89, 0x74): (0x8, 0x70), (0x88, 0x75): (0x8, 0x70), (0x85, 0x78): (0x0, 0x78),
                         (0x84, 0x79): (0x0, 0x78), (0x79, 0x84): (0x78, 0x0), (0x78, 0x85): (0x78, 0x0),
                         (0x75, 0x88): (0x70, 0x8), (0x74, 0x89): (0x70, 0x8), (0x71, 0x8C): (0x70, 0x0),
                         (0x70, 0x8D): (0x70, 0x0), (0x6D, 0x90): (0x60, 0x10), (0x6C, 0x91): (0x60, 0x10),
                         (0x69, 0x94): (0x68, 0x10), (0x68, 0x95): (0x68, 0x10), (0x65, 0x98): (0x60, 0x18),
                         (0x64, 0x99): (0x60, 0x18), (0x61, 0x9C): (0x60, 0x0), (0x60, 0x9D): (0x60, 0x0),
                         (0x5D, 0xA0): (0x40, 0x20), (0x5C, 0xA1): (0x40, 0x20), (0x59, 0xA4): (0x58, 0x20),
                         (0x58, 0xA5): (0x58, 0x20), (0x55, 0xA8): (0x50, 0x28), (0x54, 0xA9): (0x50, 0x28),
                         (0x51, 0xAC): (0x50, 0x20), (0x50, 0xAD): (0x50, 0x20), (0x4D, 0xB0): (0x40, 0x30),
                         (0x4C, 0xB1): (0x40, 0x30), (0x49, 0xB4): (0x48, 0x30), (0x48, 0xB5): (0x48, 0x30),
                         (0x45, 0xB8): (0x40, 0x38), (0x44, 0xB9): (0x40, 0x38), (0x41, 0xBC): (0x40, 0x0),
                         (0x40, 0xBD): (0x40, 0x0), (0x39, 0xC4): (0x38, 0x0), (0x38, 0xC5): (0x38, 0x0),
                         (0x35, 0xC8): (0x30, 0x8), (0x34, 0xC9): (0x30, 0x8), (0x31, 0xCC): (0x30, 0x0),
                         (0x30, 0xCD): (0x30, 0x0), (0x2D, 0xD0): (0x20, 0x10), (0x2C, 0xD1): (0x20, 0x10),
                         (0x29, 0xD4): (0x28, 0x10), (0x28, 0xD5): (0x28, 0x10), (0x25, 0xD8): (0x20, 0x18),
                         (0x24, 0xD9): (0x20, 0x18), (0x21, 0xDC): (0x20, 0x0), (0x20, 0xDD): (0x20, 0x0),
                         (0x19, 0xE4): (0x18, 0x0), (0x18, 0xE5): (0x18, 0x0), (0x15, 0xE8): (0x10, 0x8),
                         (0x14, 0xE9): (0x10, 0x8), (0x11, 0xEC): (0x10, 0x0), (0x10, 0xED): (0x10, 0x0),
                         (0x9, 0xF4): (0x8, 0x0), (0x8, 0xF5): (0x8, 0x0), (0xEA, 0x11): (0x0, 0x10),
                         (0xE9, 0x12): (0x0, 0x10), (0xE8, 0x13): (0x0, 0x10), (0xDA, 0x21): (0x0, 0x20),
                         (0xD9, 0x22): (0x0, 0x20), (0xD8, 0x23): (0x0, 0x20), (0xD2, 0x29): (0x10, 0x20),
                         (0xD1, 0x2A): (0x10, 0x20), (0xD0, 0x2B): (0x10, 0x20), (0xCA, 0x31): (0x0, 0x30),
                         (0xC9, 0x32): (0x0, 0x30), (0xC8, 0x33): (0x0, 0x30), (0xBA, 0x41): (0x0, 0x40),
                         (0xB9, 0x42): (0x0, 0x40), (0xB8, 0x43): (0x0, 0x40), (0xB2, 0x49): (0x30, 0x40),
                         (0xB1, 0x4A): (0x30, 0x40), (0xB0, 0x4B): (0x30, 0x40), (0xAA, 0x51): (0x20, 0x50),
                         (0xA9, 0x52): (0x20, 0x50), (0xA8, 0x53): (0x20, 0x50), (0xA2, 0x59): (0x20, 0x40),
                         (0xA1, 0x5A): (0x20, 0x40), (0xA0, 0x5B): (0x20, 0x40), (0x9A, 0x61): (0x0, 0x60),
                         (0x99, 0x62): (0x0, 0x60), (0x98, 0x63): (0x0, 0x60), (0x92, 0x69): (0x10, 0x60),
                         (0x91, 0x6A): (0x10, 0x60), (0x90, 0x6B): (0x10, 0x60), (0x8A, 0x71): (0x0, 0x70),
                         (0x89, 0x72): (0x0, 0x70), (0x88, 0x73): (0x0, 0x70), (0x72, 0x89): (0x70, 0x0),
                         (0x71, 0x8A): (0x70, 0x0), (0x70, 0x8B): (0x70, 0x0), (0x6A, 0x91): (0x60, 0x10),
                         (0x69, 0x92): (0x60, 0x10), (0x68, 0x93): (0x60, 0x10), (0x62, 0x99): (0x60, 0x0),
                         (0x61, 0x9A): (0x60, 0x0), (0x60, 0x9B): (0x60, 0x0), (0x5A, 0xA1): (0x40, 0x20),
                         (0x59, 0xA2): (0x40, 0x20), (0x58, 0xA3): (0x40, 0x20), (0x52, 0xA9): (0x50, 0x20),
                         (0x51, 0xAA): (0x50, 0x20), (0x50, 0xAB): (0x50, 0x20), (0x4A, 0xB1): (0x40, 0x30),
                         (0x49, 0xB2): (0x40, 0x30), (0x48, 0xB3): (0x40, 0x30), (0x42, 0xB9): (0x40, 0x0),
                         (0x41, 0xBA): (0x40, 0x0), (0x40, 0xBB): (0x40, 0x0), (0x32, 0xC9): (0x30, 0x0),
                         (0x31, 0xCA): (0x30, 0x0), (0x30, 0xCB): (0x30, 0x0), (0x2A, 0xD1): (0x20, 0x10),
                         (0x29, 0xD2): (0x20, 0x10), (0x28, 0xD3): (0x20, 0x10), (0x22, 0xD9): (0x20, 0x0),
                         (0x21, 0xDA): (0x20, 0x0), (0x20, 0xDB): (0x20, 0x0), (0x12, 0xE9): (0x10, 0x0),
                         (0x11, 0xEA): (0x10, 0x0), (0x10, 0xEB): (0x10, 0x0), (0xE5, 0x12): (0x0, 0x2),
                         (0xE2, 0x15): (0x2, 0x0), (0xD6, 0x21): (0x0, 0x20), (0xD5, 0x22): (0x0, 0x22),
                         (0xD4, 0x23): (0x0, 0x20), (0xD3, 0x24): (0x0, 0x20), (0xD2, 0x25): (0x2, 0x20),
                         (0xD1, 0x26): (0x0, 0x20), (0xD0, 0x27): (0x0, 0x20), (0xC5, 0x32): (0x0, 0x2),
                         (0xC2, 0x35): (0x2, 0x0), (0xB6, 0x41): (0x0, 0x40), (0xB5, 0x42): (0x0, 0x42),
                         (0xB4, 0x43): (0x0, 0x40), (0xB3, 0x44): (0x0, 0x40), (0xB2, 0x45): (0x2, 0x40),
                         (0xB1, 0x46): (0x0, 0x40), (0xB0, 0x47): (0x0, 0x40), (0xA6, 0x51): (0x20, 0x40),
                         (0xA5, 0x52): (0x20, 0x42), (0xA4, 0x53): (0x20, 0x40), (0xA3, 0x54): (0x20, 0x40),
                         (0xA2, 0x55): (0x22, 0x40), (0xA1, 0x56): (0x20, 0x40), (0xA0, 0x57): (0x20, 0x40),
                         (0x96, 0x61): (0x0, 0x60), (0x95, 0x62): (0x0, 0x62), (0x94, 0x63): (0x0, 0x60),
                         (0x93, 0x64): (0x0, 0x60), (0x92, 0x65): (0x2, 0x60), (0x91, 0x66): (0x0, 0x60),
                         (0x90, 0x67): (0x0, 0x60), (0x85, 0x72): (0x0, 0x2), (0x82, 0x75): (0x2, 0x0),
                         (0x75, 0x82): (0x0, 0x2), (0x72, 0x85): (0x2, 0x0), (0x66, 0x91): (0x60, 0x0),
                         (0x65, 0x92): (0x60, 0x2), (0x64, 0x93): (0x60, 0x0), (0x63, 0x94): (0x60, 0x0),
                         (0x62, 0x95): (0x62, 0x0), (0x61, 0x96): (0x60, 0x0), (0x60, 0x97): (0x60, 0x0),
                         (0x56, 0xA1): (0x40, 0x20), (0x55, 0xA2): (0x40, 0x22), (0x54, 0xA3): (0x40, 0x20),
                         (0x53, 0xA4): (0x40, 0x20), (0x52, 0xA5): (0x42, 0x20), (0x51, 0xA6): (0x40, 0x20),
                         (0x50, 0xA7): (0x40, 0x20), (0x46, 0xB1): (0x40, 0x0), (0x45, 0xB2): (0x40, 0x2),
                         (0x44, 0xB3): (0x40, 0x0), (0x43, 0xB4): (0x40, 0x0), (0x42, 0xB5): (0x42, 0x0),
                         (0x41, 0xB6): (0x40, 0x0), (0x40, 0xB7): (0x40, 0x0), (0x35, 0xC2): (0x0, 0x2),
                         (0x32, 0xC5): (0x2, 0x0), (0x26, 0xD1): (0x20, 0x0), (0x25, 0xD2): (0x20, 0x2),
                         (0x24, 0xD3): (0x20, 0x0), (0x23, 0xD4): (0x20, 0x0), (0x22, 0xD5): (0x22, 0x0),
                         (0x21, 0xD6): (0x20, 0x0), (0x20, 0xD7): (0x20, 0x0), (0x15, 0xE2): (0x0, 0x2),
                         (0x12, 0xE5): (0x2, 0x0), (0x5, 0xF2): (0x0, 0x2), (0x2, 0xF5): (0x2, 0x0),
                         (0xCD, 0x22): (0x0, 0x2), (0xCB, 0x24): (0x0, 0x4), (0xCA, 0x25): (0x2, 0x4),
                         (0xC9, 0x26): (0x0, 0x6), (0xC6, 0x29): (0x6, 0x0), (0xC5, 0x2A): (0x4, 0x2),
                         (0xC4, 0x2B): (0x4, 0x0), (0xC2, 0x2D): (0x2, 0x0), (0xAE, 0x41): (0x0, 0x40),
                         (0xAD, 0x42): (0x0, 0x42), (0xAC, 0x43): (0x0, 0x40), (0xAB, 0x44): (0x0, 0x44),
                         (0xAA, 0x45): (0x2, 0x44), (0xA9, 0x46): (0x0, 0x46), (0xA8, 0x47): (0x0, 0x40),
                         (0xA7, 0x48): (0x0, 0x40), (0xA6, 0x49): (0x6, 0x40), (0xA5, 0x4A): (0x4, 0x42),
                         (0xA4, 0x4B): (0x4, 0x40), (0xA3, 0x4C): (0x0, 0x40), (0xA2, 0x4D): (0x2, 0x40),
                         (0xA1, 0x4E): (0x0, 0x40), (0xA0, 0x4F): (0x0, 0x40), (0x8D, 0x62): (0x0, 0x2),
                         (0x8B, 0x64): (0x0, 0x4), (0x8A, 0x65): (0x2, 0x4), (0x89, 0x66): (0x0, 0x6),
                         (0x86, 0x69): (0x6, 0x0), (0x85, 0x6A): (0x4, 0x2), (0x84, 0x6B): (0x4, 0x0),
                         (0x82, 0x6D): (0x2, 0x0), (0x6D, 0x82): (0x0, 0x2), (0x6B, 0x84): (0x0, 0x4),
                         (0x6A, 0x85): (0x2, 0x4), (0x69, 0x86): (0x0, 0x6), (0x66, 0x89): (0x6, 0x0),
                         (0x65, 0x8A): (0x4, 0x2), (0x64, 0x8B): (0x4, 0x0), (0x62, 0x8D): (0x2, 0x0),
                         (0x4E, 0xA1): (0x40, 0x0), (0x4D, 0xA2): (0x40, 0x2), (0x4C, 0xA3): (0x40, 0x0),
                         (0x4B, 0xA4): (0x40, 0x4), (0x4A, 0xA5): (0x42, 0x4), (0x49, 0xA6): (0x40, 0x6),
                         (0x48, 0xA7): (0x40, 0x0), (0x47, 0xA8): (0x40, 0x0), (0x46, 0xA9): (0x46, 0x0),
                         (0x45, 0xAA): (0x44, 0x2), (0x44, 0xAB): (0x44, 0x0), (0x43, 0xAC): (0x40, 0x0),
                         (0x42, 0xAD): (0x42, 0x0), (0x41, 0xAE): (0x40, 0x0), (0x40, 0xAF): (0x40, 0x0),
                         (0x2D, 0xC2): (0x0, 0x2), (0x2B, 0xC4): (0x0, 0x4), (0x2A, 0xC5): (0x2, 0x4),
                         (0x29, 0xC6): (0x0, 0x6), (0x26, 0xC9): (0x6, 0x0), (0x25, 0xCA): (0x4, 0x2),
                         (0x24, 0xCB): (0x4, 0x0), (0x22, 0xCD): (0x2, 0x0), (0xD, 0xE2): (0x0, 0x2),
                         (0xB, 0xE4): (0x0, 0x4), (0xA, 0xE5): (0x2, 0x4), (0x9, 0xE6): (0x0, 0x6),
                         (0x6, 0xE9): (0x6, 0x0), (0x5, 0xEA): (0x4, 0x2), (0x4, 0xEB): (0x4, 0x0),
                         (0x2, 0xED): (0x2, 0x0), (0x9D, 0x42): (0x0, 0x2), (0x9B, 0x44): (0x0, 0x4),
                         (0x9A, 0x45): (0x2, 0x4), (0x99, 0x46): (0x0, 0x6), (0x97, 0x48): (0x0, 0x8),
                         (0x96, 0x49): (0x6, 0x8), (0x95, 0x4A): (0x4, 0xA), (0x94, 0x4B): (0x4, 0x8),
                         (0x93, 0x4C): (0x0, 0xC), (0x92, 0x4D): (0x2, 0xC), (0x91, 0x4E): (0x0, 0xE),
                         (0x8E, 0x51): (0xE, 0x0), (0x8D, 0x52): (0xC, 0x2), (0x8C, 0x53): (0xC, 0x0),
                         (0x8B, 0x54): (0x8, 0x4), (0x8A, 0x55): (0xA, 0x4), (0x89, 0x56): (0x8, 0x6),
                         (0x88, 0x57): (0x8, 0x0), (0x86, 0x59): (0x6, 0x0), (0x85, 0x5A): (0x4, 0x2),
                         (0x84, 0x5B): (0x4, 0x0), (0x82, 0x5D): (0x2, 0x0), (0x5D, 0x82): (0x0, 0x2),
                         (0x5B, 0x84): (0x0, 0x4), (0x5A, 0x85): (0x2, 0x4), (0x59, 0x86): (0x0, 0x6),
                         (0x57, 0x88): (0x0, 0x8), (0x56, 0x89): (0x6, 0x8), (0x55, 0x8A): (0x4, 0xA),
                         (0x54, 0x8B): (0x4, 0x8), (0x53, 0x8C): (0x0, 0xC), (0x52, 0x8D): (0x2, 0xC),
                         (0x51, 0x8E): (0x0, 0xE), (0x4E, 0x91): (0xE, 0x0), (0x4D, 0x92): (0xC, 0x2),
                         (0x4C, 0x93): (0xC, 0x0), (0x4B, 0x94): (0x8, 0x4), (0x4A, 0x95): (0xA, 0x4),
                         (0x49, 0x96): (0x8, 0x6), (0x48, 0x97): (0x8, 0x0), (0x46, 0x99): (0x6, 0x0),
                         (0x45, 0x9A): (0x4, 0x2), (0x44, 0x9B): (0x4, 0x0), (0x42, 0x9D): (0x2, 0x0),
                         (0x1D, 0xC2): (0x0, 0x2), (0x1B, 0xC4): (0x0, 0x4), (0x1A, 0xC5): (0x2, 0x4),
                         (0x19, 0xC6): (0x0, 0x6), (0x17, 0xC8): (0x0, 0x8), (0x16, 0xC9): (0x6, 0x8),
                         (0x15, 0xCA): (0x4, 0xA), (0x14, 0xCB): (0x4, 0x8), (0x13, 0xCC): (0x0, 0xC),
                         (0x12, 0xCD): (0x2, 0xC), (0x11, 0xCE): (0x0, 0xE), (0xE, 0xD1): (0xE, 0x0),
                         (0xD, 0xD2): (0xC, 0x2), (0xC, 0xD3): (0xC, 0x0), (0xB, 0xD4): (0x8, 0x4),
                         (0xA, 0xD5): (0xA, 0x4), (0x9, 0xD6): (0x8, 0x6), (0x8, 0xD7): (0x8, 0x0),
                         (0x6, 0xD9): (0x6, 0x0), (0x5, 0xDA): (0x4, 0x2), (0x4, 0xDB): (0x4, 0x0),
                         (0x2, 0xDD): (0x2, 0x0), (0x3D, 0x82): (0x0, 0x2), (0x3B, 0x84): (0x0, 0x4),
                         (0x3A, 0x85): (0x2, 0x4), (0x39, 0x86): (0x0, 0x6), (0x37, 0x88): (0x0, 0x8),
                         (0x36, 0x89): (0x6, 0x8), (0x35, 0x8A): (0x4, 0xA), (0x34, 0x8B): (0x4, 0x8),
                         (0x33, 0x8C): (0x0, 0xC), (0x32, 0x8D): (0x2, 0xC), (0x31, 0x8E): (0x0, 0xE),
                         (0x2F, 0x90): (0x0, 0x10), (0x2E, 0x91): (0xE, 0x10), (0x2D, 0x92): (0xC, 0x12),
                         (0x2C, 0x93): (0xC, 0x10), (0x2B, 0x94): (0x8, 0x14), (0x2A, 0x95): (0xA, 0x14),
                         (0x29, 0x96): (0x8, 0x16), (0x28, 0x97): (0x8, 0x10), (0x27, 0x98): (0x0, 0x18),
                         (0x26, 0x99): (0x6, 0x18), (0x25, 0x9A): (0x4, 0x1A), (0x24, 0x9B): (0x4, 0x18),
                         (0x23, 0x9C): (0x0, 0x1C), (0x22, 0x9D): (0x2, 0x1C), (0x21, 0x9E): (0x0, 0x1E),
                         (0x1E, 0xA1): (0x1E, 0x0), (0x1D, 0xA2): (0x1C, 0x2), (0x1C, 0xA3): (0x1C, 0x0),
                         (0x1B, 0xA4): (0x18, 0x4), (0x1A, 0xA5): (0x1A, 0x4), (0x19, 0xA6): (0x18, 0x6),
                         (0x18, 0xA7): (0x18, 0x0), (0x17, 0xA8): (0x10, 0x8), (0x16, 0xA9): (0x16, 0x8),
                         (0x15, 0xAA): (0x14, 0xA), (0x14, 0xAB): (0x14, 0x8), (0x13, 0xAC): (0x10, 0xC),
                         (0x12, 0xAD): (0x12, 0xC), (0x11, 0xAE): (0x10, 0xE), (0x10, 0xAF): (0x10, 0x0),
                         (0xE, 0xB1): (0xE, 0x0), (0xD, 0xB2): (0xC, 0x2), (0xC, 0xB3): (0xC, 0x0),
                         (0xB, 0xB4): (0x8, 0x4), (0xA, 0xB5): (0xA, 0x4), (0x9, 0xB6): (0x8, 0x6),
                         (0x8, 0xB7): (0x8, 0x0), (0x6, 0xB9): (0x6, 0x0), (0x5, 0xBA): (0x4, 0x2),
                         (0x4, 0xBB): (0x4, 0x0), (0x2, 0xBD): (0x2, 0x0)}

edge_table = []

def index(r, c):
    return r * N + c


def no_border(state):
    return state.replace('?', '')


def print_puzzle(b, w):
    string_board = ''
    for x in range(8):
        for y in range(8):
            if b & 1:
                string_board += '@ '
            elif w & 1:
                string_board += 'o '
            else:
                string_board += '. '
            b >>= 1
            w >>= 1
            if y != N - 1:
                string_board += '| '
            else:
                string_board += '\n'
        if x != N - 1:
            for a in range(8):
                string_board += '---'
                if a != N - 1:
                    string_board += '+'
            string_board += '\n'
    print(string_board[::-1])


def reset_board():
    global black, white
    black = 0x810000000
    white = 0x1008000000


# def tile_count(board):
#     return bin(board).count('1')


def shift(board, direction):
    if direction < 4:  # rightward shift
        return (board >> shifts[direction][1]) & shifts[direction][0]
    return (board << shifts[direction][1]) & shifts[direction][0]


def reflect_horizontal_axis(to_flip, move_index, return_move):
    if return_move:
        return (9 - move_index // 10) * 10 + move_index % 10  # (N - a, b)
    return ((to_flip << 56) | ((to_flip << 40) & 0x00ff000000000000) | ((to_flip << 24) & 0x0000ff0000000000) | (
            (to_flip << 8) & 0x000000ff00000000) | ((to_flip >> 8) & 0x00000000ff000000) | (
                    (to_flip >> 24) & 0x0000000000ff0000) | ((to_flip >> 40) & 0x000000000000ff00) | (
                    to_flip >> 56)) & filled


def reflect_vertical_axis(to_flip, move_index, return_move):
    if return_move:
        return move_index // 10 * 10 + 9 - move_index % 10  # (a, N - b)
    return (((to_flip << 7) & leftmost_column) | ((to_flip << 5) & 0x4040404040404040) | (
            (to_flip << 3) & 0x2020202020202020) | ((to_flip << 1) & 0x1010101010101010) | (
                    (to_flip >> 1) & 0x808080808080808) | ((to_flip >> 3) & 0x404040404040404) | (
                    (to_flip >> 5) & 0x202020202020202) | (
                    (to_flip >> 7) & rightmost_column)) & filled


def reflect_left_right_diagonal_axis(to_flip, move_index, return_move):
    if return_move:
        return move_index % 10 * 10 + move_index // 10  # (b, a)
    temp = 0x0f0f0f0f00000000 & (to_flip ^ (to_flip << 28))
    to_flip ^= temp ^ (temp >> 28)
    temp = 0x3333000033330000 & (to_flip ^ (to_flip << 14))
    to_flip ^= temp ^ (temp >> 14)
    temp = 0x5500550055005500 & (to_flip ^ (to_flip << 7))
    return (to_flip ^ temp ^ (temp >> 7)) & filled


def reflect_right_left_diagonal_axis(to_flip, move_index, return_move):
    if return_move:
        return (9 - move_index % 10) * 10 + 9 - move_index // 10  # (N - b, N - a)
    temp = to_flip ^ (to_flip << 36)
    to_flip ^= 0xf0f0f0f00f0f0f0f & (temp ^ (to_flip >> 36))
    temp = 0xcccc0000cccc0000 & (to_flip ^ (to_flip << 18))
    to_flip ^= temp ^ (temp >> 18)
    temp = 0xaa00aa00aa00aa00 & (to_flip ^ (to_flip << 9))
    return (to_flip ^ temp ^ (temp >> 9)) & filled


def rotate_90_cw(to_rotate, move_index, return_move):
    if return_move:
        return move_index % 10 * 10 + 9 - move_index // 10  # (b, N - a)
    return reflect_left_right_diagonal_axis(reflect_horizontal_axis(to_rotate, 0, False), 0, False) & filled


def rotate_90_ccw(to_rotate, move_index, return_move):
    if return_move:
        return (9 - move_index % 10) * 10 + move_index // 10  # (N - b, a)
    return reflect_horizontal_axis(reflect_left_right_diagonal_axis(to_rotate, 0, False), 0, False) & filled


def rotate_180(to_rotate, move_index, return_move):
    if return_move:
        return (9 - move_index // 10) * 10 + 9 - move_index % 10  # (N - a, N - b)
    return reflect_vertical_axis(reflect_horizontal_axis(to_rotate, 0, False), 0, False) & filled


def opening_finder(key, b, w, move_index, return_move):
    if key == 0:
        if return_move:
            return move_index
        return b, w
    if key == 1:
        if return_move:
            return reflect_horizontal_axis(0, move_index, True)
        return reflect_horizontal_axis(b, 0, False), reflect_horizontal_axis(w, 0, False)
    if key == 2:
        if return_move:
            return reflect_vertical_axis(0, move_index, True)
        return reflect_vertical_axis(b, 0, False), reflect_vertical_axis(w, 0, False)
    if key == 3:
        if return_move:
            return reflect_left_right_diagonal_axis(0, move_index, True)
        return reflect_left_right_diagonal_axis(b, 0, False), reflect_left_right_diagonal_axis(w, 0, False)
    if key == 4:
        if return_move:
            return reflect_right_left_diagonal_axis(0, move_index, True)
        return reflect_right_left_diagonal_axis(b, 0, False), reflect_right_left_diagonal_axis(w, 0, False)
    if key == 5:
        if return_move:
            return rotate_90_cw(0, move_index, True)
        return rotate_90_cw(b, 0, False), rotate_90_cw(w, 0, False)
    if key == 6:
        if return_move:
            return rotate_90_ccw(0, move_index, True)
        return rotate_90_ccw(b, 0, False), rotate_90_ccw(w, 0, False)
    if return_move:
        return rotate_180(0, move_index, True)
    return rotate_180(b, 0, False), rotate_180(w, 0, False)


def possibleMoves(board, opponent_board):
    possibles = 0
    empties = (board | opponent_board) ^ filled
    for direction in range(4):
        x = (board >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        possibles |= (x >> shifts[direction][1]) & shifts[direction][0] & empties
    for direction in range(4, 8):
        x = (board << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        possibles |= (x << shifts[direction][1]) & shifts[direction][0] & empties
    return possibles


def move(board, opponent_board, pos):
    placed_token = index_to_bit[pos]
    board |= placed_token
    flipped = 0
    for direction in range(4):
        x = (placed_token >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x >> shifts[direction][1]) & shifts[direction][0] & opponent_board
        flipped |= x if (x >> shifts[direction][1]) & shifts[direction][0] & board else 0
    for direction in range(4, 8):
        x = (placed_token << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        x |= (x << shifts[direction][1]) & shifts[direction][0] & opponent_board
        flipped |= x if (x << shifts[direction][1]) & shifts[direction][0] & board else 0
    return board ^ flipped, opponent_board ^ flipped


def initial_negascout(board, opponent_board, player, depth, alpha, beta, best_move):
    # if depth == 0:
    #   scored = score_board(board, opponent_board, possibleMoves(board, opponent_board), flipped_tiles, flipped_directions)
    #   return None, scored

    global transposition_table
    hash_key = (player << 128) | (board << 64) | opponent_board
    if hash_key in transposition_table:
        table_value, value_type, table_depth, pos = transposition_table[hash_key]
        if depth <= table_depth:
            if value_type == 0:
                return pos, table_value
            elif value_type == 1:
                alpha = max(alpha, table_value)
            else:
                beta = min(beta, table_value)
        if alpha >= beta:
            return pos, alpha
    transposition_type = 2

    possibles = []
    possible_moves = possibleMoves(board, opponent_board)
    # temp_moves = possible_moves
    possible_move_list = []
    for p in range(64):
        if possible_moves & index_to_bit[p] and p != best_move:
            result = move(board, opponent_board, p)
            possible_move_list.append(
                (p, score_board(result[1], result[0], possibleMoves(result[1], result[0]), opponent_board, p, -player), result))
    # if player < 0:
    possible_move_list = sorted(possible_move_list, key=lambda x: x[1])
    if best_move != -1:
        result = move(board, opponent_board, best_move)
        possible_move_list.insert(0, (best_move, 0, result))
    first = True
    for possible, s, result in possible_move_list:
        new_board = result[0]
        new_opponent_board = result[1]
        next_player = get_next_player(new_board, new_opponent_board, player)
        if next_player[0] is None:
            transposition_type = 0
            if not new_opponent_board:
                transposition_table[hash_key] = 10000000000000000, 0, depth, possible
                return possible, 10000000000000000
            else:
                tile_difference = bin(new_board).count('1') - bin(new_opponent_board).count('1')
                if tile_difference > 0:
                    transposition_table[hash_key] = 100000000000000, 0, depth, possible
                    return possible, 100000000000000
                elif tile_difference < 0:
                    score = -100000000000000
                else:
                    score = 0
            if score > alpha:
                alpha = score
            possibles.append((possible, alpha))
            if alpha >= beta:
                transposition_type = 1
                break
        else:
            new_flips = bin(new_board & opponent_board).count('1')
            new_directions = bin(neighbors[possible] & new_board & opponent_board).count('1')
            if first:
                if player != next_player[0]:
                    value = -negascout(new_opponent_board, new_board, next_player[0], depth - 1, 1, -beta, -alpha,
                                       next_player[1], new_flips * player, new_directions * player)
                else:
                    value = negascout(new_board, new_opponent_board, next_player[0], depth - 1, 1, alpha, beta,
                                      next_player[1], new_flips * player, new_directions * player)
            else:
                # if alpha >= beta:
                #     break
                if player != next_player[0]:
                    value = -negascout(new_opponent_board, new_board, next_player[0], depth - 1, 1, -alpha - 1, -alpha,
                                       next_player[1], new_flips * player, new_directions * player)
                else:
                    value = negascout(new_board, new_opponent_board, next_player[0], depth - 1, 1, alpha, alpha + 1,
                                      next_player[1], new_flips * player, new_directions * player)
                if alpha < value < beta:
                    if player != next_player[0]:
                        value = -negascout(new_opponent_board, new_board, next_player[0], depth - 1, 1, -beta, -value,
                                           next_player[1], new_flips * player, new_directions * player)
                    else:
                        value = negascout(new_board, new_opponent_board, next_player[0], depth - 1, 1, value, beta,
                                          next_player[1], new_flips * player, new_directions * player)
            if value == 10000000000000000:
                transposition_table[hash_key] = value, 0, depth, possible
                return possible, value
            if value > alpha:
                transposition_type = 0
                alpha = value
            possibles.append((possible, alpha))
            if alpha >= beta:
                transposition_type = 1
                break
        first = False
    best = max(possibles, key=lambda x: x[1])
    transposition_table[hash_key] = best[1], transposition_type, depth, best[0]
    return best


def negascout(board, opponent_board, player, depth, depth2, alpha, beta, new_possibles, flipped_tiles, flipped_directions):
    global transposition_table  # value, type, depth - depth2
    hash_key = (player << 128) | (board << 64) | opponent_board
    if depth == 0:
        if hash_key in transposition_table:
            table_value, value_type, table_depth, pos = transposition_table[hash_key]
            if depth <= table_depth and value_type == 0:
                return table_value
        score = score_board(board, opponent_board, new_possibles, flipped_tiles, flipped_directions, player)
        transposition_table[hash_key] = score, 0, depth, -1
        return score

    if hash_key in transposition_table:
        table_value, value_type, table_depth, pos = transposition_table[hash_key]
        if depth <= table_depth:
            if value_type == 0:
                return table_value
            elif value_type == 1:
                alpha = max(alpha, table_value)
            else:
                beta = min(beta, table_value)
        if alpha >= beta:
            return alpha

    transposition_type = 2  # 0 for exact, 1 for lower bound, 2 for upper bound
    first = True
    for p in range(64):
        if not (new_possibles & index_to_bit[p]):
            continue
        new_board, new_opponent_board = move(board, opponent_board, p)
        next_player = get_next_player(new_board, new_opponent_board, player)

        if next_player[0] is None:  # game over
            transposition_type = 0
            if not new_opponent_board:
                score = 10000000000000000 - bin(new_board).count('1')
            else:
                tile_difference = bin(new_board).count('1') - bin(new_opponent_board).count('1')
                if tile_difference > 0:
                    transposition_table[hash_key] = 100000000000000, 0, depth, p
                    return 100000000000000
                elif tile_difference < 0:
                    score = -100000000000000
                else:
                    score = 0
            if score > alpha:
                transposition_type = 0
                alpha = score
            if alpha >= beta:
                transposition_type = 1
                break
        else:
            new_flips = bin(new_board & opponent_board).count('1')
            new_directions = bin(neighbors[p] & new_board & opponent_board).count('1')
            if first:
                if player != next_player[0]:
                    value = -negascout(new_opponent_board, new_board, next_player[0], depth - 1, depth2 + 1, -beta,
                                       -alpha, next_player[1], flipped_tiles + new_flips * player,
                                       flipped_directions + new_directions * player)
                else:
                    value = negascout(new_board, new_opponent_board, next_player[0], depth - 1, depth2 + 1, alpha, beta,
                                      next_player[1], flipped_tiles + new_flips * player,
                                      flipped_directions + new_directions * player)
            else:
                if player != next_player[0]:
                    value = -negascout(new_opponent_board, new_board, next_player[0], depth - 1, depth2 + 1, -alpha - 1,
                                       -alpha, next_player[1], flipped_tiles + new_flips * player,
                                       flipped_directions + new_directions * player)
                else:
                    value = negascout(new_board, new_opponent_board, next_player[0], depth - 1, depth2 + 1, alpha,
                                      alpha + 1, next_player[1], flipped_tiles + new_flips * player,
                                      flipped_directions + new_directions * player)
                if alpha < value < beta:
                    if player != next_player[0]:
                        value = -negascout(new_opponent_board, new_board, next_player[0], depth - 1, depth2 + 1, -beta,
                                           -value, next_player[1], flipped_tiles + new_flips * player,
                                           flipped_directions + new_directions * player)
                    else:
                        value = negascout(new_board, new_opponent_board, next_player[0], depth - 1, depth2 + 1, value,
                                          beta, next_player[1], flipped_tiles + new_flips * player,
                                          flipped_directions + new_directions * player)
            if value == 10000000000000000:
                transposition_table[hash_key] = value, 0, depth, p
                return value
            if value > alpha:
                transposition_type = 0
                alpha = value
            if alpha >= beta:
                transposition_type = 1
                break
        first = False
    # global cc
    # if player << 128 | board << 64 | opponent_board in transposition_table:
    #   print(transposition_table[player << 128 | board << 64 | opponent_board], max(possibles, key=lambda x: x[1]))
    # if hash_key in transposition_table:
    #     print(transposition_table[hash_key][0], best, transposition_table[hash_key][1])
    transposition_table[hash_key] = alpha, transposition_type, depth, -1
    # cc += 1
    return alpha


def get_next_player(board, opponent_board, player):
    opponent_possibles = possibleMoves(opponent_board, board)
    if opponent_possibles:
        return -player, opponent_possibles
    possibles = possibleMoves(board, opponent_board)
    if possibles:
        return player, possibles
    return None, None


def score_board(p, o, possibles, flipped_tiles, flipped_directions, player):
    player_tiles = bin(p).count('1')
    opp_tiles = bin(o).count('1')
    opp_possibles = possibleMoves(o, p)
    player_mobility = bin(possibles).count('1')
    opp_mobility = bin(opp_possibles).count('1')
    if player_mobility + opp_mobility == 0:
        return 100000000000000 * (player_tiles - opp_tiles)
    empties = 64 - (player_tiles + opp_tiles)
    # if empties >= 20:
    #     black_mobility = bin(black_possibles[0] ^ c_x_squares).count('1')
    #     white_mobility = bin(white_possibles[0] ^ c_x_squares).count('1')
    empty_tiles = (p | o) ^ filled
    stables, opp_stables = get_stability(p, o)
    corner_heuristic = bin(p & corners).count('1') - bin(o & corners).count('1')
    mobility_heuristic = 35 * (player_mobility - opp_mobility) / (player_mobility + opp_mobility)
    stability_heuristic = bin(stables).count('1') - bin(opp_stables).count('1')

    new_p, new_o = p, o
    if not possibles:
        new_p, new_o = o, p
    playerB2L = (new_p & 0x40000000000000) >> 45
    opponentB2L = (new_o & 0x40000000000000) >> 45

    playerG7R = (new_p & 0x200) >> 9
    opponentG7R = (new_o & 0x200) >> 9

    playerG2 = (new_p & 0x2000000000000)
    opponentG2 = (new_o & 0x2000000000000)
    playerG2L = playerG2 >> 40
    playerG2R = playerG2 >> 49
    opponentG2L = opponentG2 >> 40
    opponentG2R = opponentG2 >> 49

    playerB7 = (new_p & 0x4000)
    opponentB7 = (new_o & 0x4000)
    playerB7L = playerB7 >> 5
    playerB7R = playerB7 >> 14
    opponentB7L = opponentB7 >> 5
    opponentB7R = opponentB7 >> 14

    # left
    playerLeft = playerB2L | ((((new_p & 0x8080808080808080) * 567382630219905) >> 55) & 510) | playerB7R
    opponentLeft = opponentB2L | ((((new_o & 0x8080808080808080) * 567382630219905) >> 55) & 510) | opponentB7R
    leftIndex = base2To3[playerLeft] + 2 * base2To3[opponentLeft]

    # right
    playerRight = playerG2L | ((((new_p & 0x101010101010101) * 72624976668147840) >> 55) & 510) | playerG7R
    opponentRight = opponentG2L | ((((new_o & 0x101010101010101) * 72624976668147840) >> 55) & 510) | opponentG7R
    rightIndex = base2To3[playerRight] + 2 * base2To3[opponentRight]

    # top
    playerTop = playerB2L | ((new_p & 0xff00000000000000) >> 55) | playerG2R
    opponentTop = opponentB2L | ((new_o & 0xff00000000000000) >> 55) | opponentG2R
    topIndex = base2To3[playerTop] + 2 * base2To3[opponentTop]

    # bottom
    playerBottom = playerB7L | ((new_p & 0xff) << 1) | playerG7R
    opponentBottom = opponentB7L | ((new_o & 0xff) << 1) | opponentG7R
    bottomIndex = base2To3[playerBottom] + 2 * base2To3[opponentBottom]

    edge_heuristic = edge_table[topIndex] + edge_table[bottomIndex] + edge_table[leftIndex] + edge_table[rightIndex]

    if empties > 20:
        frontier_disks = frontier_disks_opp = 0
        sum_adjacents = sum_adjacents_opp = 0
        for direction in range(8):
            shifted = shift(empty_tiles, direction)
            temp_p = shifted & p
            temp_o = shifted & o
            sum_adjacents += bin(temp_p).count('1')
            sum_adjacents_opp += bin(temp_o).count('1')
            frontier_disks |= temp_p
            frontier_disks_opp |= temp_o
        frontier_disks &= edges ^ filled
        frontier_disks_opp &= edges ^ filled
        adjacent_empties = adjacent_empties_opp = 0
        for direction in range(8):
            adjacent_empties |= shift(p & (edges ^ filled), direction) & empty_tiles
            adjacent_empties_opp |= shift(o & (edges ^ filled), direction) & empty_tiles
        adjacent_empties_edges = adjacent_empties_edges_opp = 0
        for direction in (0, 4):
            adjacent_empties_edges |= shift(empty_tiles, direction) & (p & (top_row | bottom_row))
            adjacent_empties_edges_opp |= shift(empty_tiles, direction) & o & (top_row | bottom_row)
            adjacent_empties_edges |= shift((p & (top_row | bottom_row)), direction) & empty_tiles
            adjacent_empties_edges_opp |= shift(o & (top_row | bottom_row), direction) & empty_tiles
        for direction in (2, 6):
            adjacent_empties_edges |= shift(empty_tiles, direction) & (p & (leftmost_column | rightmost_column))
            adjacent_empties_edges_opp |= shift(empty_tiles, direction) & (o & (leftmost_column | rightmost_column))
            adjacent_empties_edges |= shift(p & (leftmost_column | rightmost_column), direction) & empty_tiles
            adjacent_empties_edges_opp |= shift(o & (leftmost_column | rightmost_column), direction) & empty_tiles
        frontier_disk_heuristic = (empties / 15 + 0.15) * bin(adjacent_empties_edges).count('1') + 2 * bin(
            adjacent_empties).count('1') + bin(frontier_disks).count('1') + sum_adjacents - 2 * bin(
            adjacent_empties_edges_opp).count('1') - 2 * bin(adjacent_empties_opp).count('1') - 0.5 * bin(
            frontier_disks_opp).count('1') - sum_adjacents_opp

        x_square_heuristic = 470 if top_left_x_square & p and top_left_corner & empty_tiles else 0
        x_square_heuristic += 470 if top_right_x_square & p and top_right_corner & empty_tiles else 0
        x_square_heuristic += 470 if bottom_left_x_square & p and bottom_left_corner & empty_tiles else 0
        x_square_heuristic += 470 if bottom_right_x_square & p and bottom_right_corner & empty_tiles else 0
        x_square_heuristic -= 470 if top_left_x_square & o and top_left_corner & empty_tiles else 0
        x_square_heuristic -= 470 if top_right_x_square & o and top_right_corner & empty_tiles else 0
        x_square_heuristic -= 470 if bottom_left_x_square & o and bottom_left_corner & empty_tiles else 0
        x_square_heuristic -= 470 if bottom_right_x_square & o and bottom_right_corner & empty_tiles else 0
        # c_square_heuristic = 270 * (bin(
        #     ((empty_tiles << 1) & (top_bottom_c_squares & p)) & ((empty_tiles >> 1) & (top_bottom_c_squares & p)) | (
        #             (empty_tiles << 8) & (left_right_c_squares & p)) & (
        #             (empty_tiles >> 8) & (left_right_c_squares & p))).count('1') - bin(
        #     ((empty_tiles << 1) & (top_bottom_c_squares & o)) & ((empty_tiles >> 1) & (top_bottom_c_squares & o)) | (
        #             (empty_tiles << 8) & (left_right_c_squares & o)) & (
        #             (empty_tiles >> 8) & (left_right_c_squares & o))).count('1'))
    #     if empties > 35:
    #         return corner_heuristic * 60000 + mobility_heuristic * 3500 + stability_heuristic * 12000 - \
    #                frontier_disk_heuristic * 1500 - 120 * flipped_tiles - 300 * \
    #                flipped_directions - 150 * x_square_heuristic  # - 200 * c_square_heuristic
    #     elif 20 < empties <= 35:
    #         return corner_heuristic * 27000 + mobility_heuristic * 2500 + stability_heuristic * 10000 - \
    #                frontier_disk_heuristic * 1200 - 120 * flipped_tiles - 300 * flipped_directions - 150 * \
    #                x_square_heuristic  # - 200 * c_square_heuristic
    # return corner_heuristic * 70000 + stability_heuristic * 30000 + mobility_heuristic * 5500

    #     if empties > 35:
    #         return corner_heuristic * 60000 + mobility_heuristic * 2000 + stability_heuristic * 12000 - \
    #                frontier_disk_heuristic * 500 - 120 * flipped_tiles - 700 * \
    #                flipped_directions  # - 150 * x_square_heuristic - 200 * c_square_heuristic
    #     elif 20 < empties <= 35:
    #         return corner_heuristic * 27000 + mobility_heuristic * 2000 + stability_heuristic * 10000 - \
    #                frontier_disk_heuristic * 500 - 120 * flipped_tiles - 700 * flipped_directions  # - 150 * \
    #                # x_square_heuristic - 200 * c_square_heuristic
    # return corner_heuristic * 70000 + stability_heuristic * 30000 + mobility_heuristic * 5500

        if empties > 35:
            return corner_heuristic * 60000 + mobility_heuristic * 2000 + stability_heuristic * 12000 - \
                   frontier_disk_heuristic * 500 - 120 * flipped_tiles - 700 * \
                   flipped_directions + 15 * edge_heuristic - 150 * x_square_heuristic  # - 200 * c_square_heuristic
        elif 20 < empties <= 35:
            return corner_heuristic * 27000 + mobility_heuristic * 2000 + stability_heuristic * 10000 - \
                   frontier_disk_heuristic * 500 - 120 * flipped_tiles - 700 * flipped_directions + 15 * edge_heuristic \
                    - 150 * x_square_heuristic  # - 200 * c_square_heuristic
    return corner_heuristic * 40000 + stability_heuristic * 15000 + mobility_heuristic * 6000 + edge_heuristic * 25


def get_stability(p, o):
    if not ((p | o) & 0xC3810000000081C3):  # corners and spaces vertically & horizontally adjacent to them
        return 0, 0

    # corners
    p_stables = p & corners
    o_stables = o & corners

    # filled outer edges (if) and edge building (else)
    if not (p | o) & top_row ^ top_row:
        p_stables |= p & top_row
        o_stables |= o & top_row
    else:
        if not (p & 0xFE00000000000000) ^ 0xFE00000000000000:   # @@@@@@@x to @@x (player)
            p_stables |= 0xFE00000000000000
        elif not (p & 0xFC00000000000000) ^ 0xFC00000000000000:
            p_stables |= 0xFC00000000000000
        elif not (p & 0xF800000000000000) ^ 0xF800000000000000:
            p_stables |= 0xF800000000000000
        elif not (p & 0xF000000000000000) ^ 0xF000000000000000:
            p_stables |= 0xF000000000000000
        elif not (p & 0xE000000000000000) ^ 0xE000000000000000:
            p_stables |= 0xE000000000000000
        elif not (p & 0xC000000000000000) ^ 0xC000000000000000:
            p_stables |= 0xC000000000000000
        elif not (p & 0x7F00000000000000) ^ 0x7F00000000000000:   # x@@@@@@@ to x@@
            p_stables |= 0x7F00000000000000
        elif not (p & 0x3F00000000000000) ^ 0x3F00000000000000:
            p_stables |= 0x3F00000000000000
        elif not (p & 0x1F00000000000000) ^ 0x1F00000000000000:
            p_stables |= 0x1F00000000000000
        elif not (p & 0xF00000000000000) ^ 0xF00000000000000:
            p_stables |= 0xF00000000000000
        elif not (p & 0x700000000000000) ^ 0x700000000000000:
            p_stables |= 0x700000000000000
        elif not (p & 0x300000000000000) ^ 0x300000000000000:
            p_stables |= 0x300000000000000

        elif not (o & 0xFE00000000000000) ^ 0xFE00000000000000:   # ooooooox to oox (opponent)
            o_stables |= 0xFE00000000000000
        elif not (o & 0xFC00000000000000) ^ 0xFC00000000000000:
            o_stables |= 0xFC00000000000000
        elif not (o & 0xF800000000000000) ^ 0xF800000000000000:
            o_stables |= 0xF800000000000000
        elif not (o & 0xF000000000000000) ^ 0xF000000000000000:
            o_stables |= 0xF000000000000000
        elif not (o & 0xE000000000000000) ^ 0xE000000000000000:
            o_stables |= 0xE000000000000000
        elif not (o & 0xC000000000000000) ^ 0xC000000000000000:
            o_stables |= 0xC000000000000000
        elif not (o & 0x7F00000000000000) ^ 0x7F00000000000000:   # xooooooo to xoo
            o_stables |= 0x7F00000000000000
        elif not (o & 0x3F00000000000000) ^ 0x3F00000000000000:
            o_stables |= 0x3F00000000000000
        elif not (o & 0x1F00000000000000) ^ 0x1F00000000000000:
            o_stables |= 0x1F00000000000000
        elif not (o & 0xF00000000000000) ^ 0xF00000000000000:
            o_stables |= 0xF00000000000000
        elif not (o & 0x700000000000000) ^ 0x700000000000000:
            o_stables |= 0x700000000000000
        elif not (o & 0x300000000000000) ^ 0x300000000000000:
            o_stables |= 0x300000000000000

    if not (p | o) & bottom_row ^ bottom_row:
        p_stables |= p & bottom_row
        o_stables |= o & bottom_row
    else:
        if not (p & 0xFE) ^ 0xFE:   # @@@@@@@x to @@x
            p_stables |= 0xFE
        elif not (p & 0xFC) ^ 0xFC:
            p_stables |= 0xFC
        elif not (p & 0xF8) ^ 0xF8:
            p_stables |= 0xF8
        elif not (p & 0xF0) ^ 0xF0:
            p_stables |= 0xF0
        elif not (p & 0xE0) ^ 0xE0:
            p_stables |= 0xE0
        elif not (p & 0xC0) ^ 0xC0:
            p_stables |= 0xC0
        elif not (p & 0x7F) ^ 0x7F:   # x@@@@@@@ to x@@
            p_stables |= 0x7F
        elif not (p & 0x3F) ^ 0x3F:
            p_stables |= 0x3F
        elif not (p & 0x1F) ^ 0x1F:
            p_stables |= 0x1F
        elif not (p & 0xF) ^ 0xF:
            p_stables |= 0xF
        elif not (p & 7) ^ 7:
            p_stables |= 7
        elif not (p & 3) ^ 3:
            p_stables |= 3

        elif not (o & 0xFE) ^ 0xFE:  # ooooooox to oox
            o_stables |= 0xFE
        elif not (o & 0xFC) ^ 0xFC:
            o_stables |= 0xFC
        elif not (o & 0xF8) ^ 0xF8:
            o_stables |= 0xF8
        elif not (o & 0xF0) ^ 0xF0:
            o_stables |= 0xF0
        elif not (o & 0xE0) ^ 0xE0:
            o_stables |= 0xE0
        elif not (o & 0xC0) ^ 0xC0:
            o_stables |= 0xC0
        elif not (o & 0x7F) ^ 0x7F:  # xooooooo to xoo
            o_stables |= 0x7F
        elif not (o & 0x3F) ^ 0x3F:
            o_stables |= 0x3F
        elif not (o & 0x1F) ^ 0x1F:
            o_stables |= 0x1F
        elif not (o & 0xF) ^ 0xF:
            o_stables |= 0xF
        elif not (o & 7) ^ 7:
            o_stables |= 7
        elif not (o & 3) ^ 3:
            o_stables |= 3
    if not (p | o) & leftmost_column ^ leftmost_column:
        p_stables |= p & leftmost_column
        o_stables |= o & leftmost_column
    else:
        if not (p & 0x8080808080808000) ^ 0x8080808080808000:   # @@@@@@@x to @@x
            p_stables |= 0x8080808080808000
        elif not (p & 0x8080808080800000) ^ 0x8080808080800000:
            p_stables |= 0x8080808080800000
        elif not (p & 0x8080808080000000) ^ 0x8080808080000000:
            p_stables |= 0x8080808080000000
        elif not (p & 0x8080808000000000) ^ 0x8080808000000000:
            p_stables |= 0x8080808000000000
        elif not (p & 0x8080800000000000) ^ 0x8080800000000000:
            p_stables |= 0x8080800000000000
        elif not (p & 0x8080000000000000) ^ 0x8080000000000000:
            p_stables |= 0x8080000000000000
        elif not (p & 0x80808080808080) ^ 0x80808080808080:   # x@@@@@@@ to x@@
            p_stables |= 0x80808080808080
        elif not (p & 0x808080808080) ^ 0x808080808080:
            p_stables |= 0x808080808080
        elif not (p & 0x8080808080) ^ 0x8080808080:
            p_stables |= 0x8080808080
        elif not (p & 0x80808080) ^ 0x80808080:
            p_stables |= 0x80808080
        elif not (p & 0x808080) ^ 0x808080:
            p_stables |= 0x808080
        elif not (p & 0x8080) ^ 0x8080:
            p_stables |= 0x8080

        elif not (o & 0x8080808080808000) ^ 0x8080808080808000:  # ooooooox to oox
            o_stables |= 0x8080808080808000
        elif not (o & 0x8080808080800000) ^ 0x8080808080800000:
            o_stables |= 0x8080808080800000
        elif not (o & 0x8080808080000000) ^ 0x8080808080000000:
            o_stables |= 0x8080808080000000
        elif not (o & 0x8080808000000000) ^ 0x8080808000000000:
            o_stables |= 0x8080808000000000
        elif not (o & 0x8080800000000000) ^ 0x8080800000000000:
            o_stables |= 0x8080800000000000
        elif not (o & 0x8080000000000000) ^ 0x8080000000000000:
            o_stables |= 0x8080000000000000
        elif not (o & 0x80808080808080) ^ 0x80808080808080:  # xooooooo to xoo
            o_stables |= 0x80808080808080
        elif not (o & 0x808080808080) ^ 0x808080808080:
            o_stables |= 0x808080808080
        elif not (o & 0x8080808080) ^ 0x8080808080:
            o_stables |= 0x8080808080
        elif not (o & 0x80808080) ^ 0x80808080:
            o_stables |= 0x80808080
        elif not (o & 0x808080) ^ 0x808080:
            o_stables |= 0x808080
        elif not (o & 0x8080) ^ 0x8080:
            o_stables |= 0x8080
    if not (p | o) & rightmost_column ^ rightmost_column:
        p_stables |= p & rightmost_column
        o_stables |= o & rightmost_column
    else:
        if not (p & 0x101010101010100) ^ 0x101010101010100:   # @@@@@@@x to @@x
            p_stables |= 0x101010101010100
        elif not (p & 0x101010101010000) ^ 0x101010101010000:
            p_stables |= 0x101010101010000
        elif not (p & 0x101010101000000) ^ 0x101010101000000:
            p_stables |= 0x101010101000000
        elif not (p & 0x101010100000000) ^ 0x101010100000000:
            p_stables |= 0x101010100000000
        elif not (p & 0x101010000000000) ^ 0x101010000000000:
            p_stables |= 0x101010000000000
        elif not (p & 0x101000000000000) ^ 0x101000000000000:
            p_stables |= 0x101000000000000
        elif not (p & 0x1010101010101) ^ 0x1010101010101:   # x@@@@@@@ to x@@
            p_stables |= 0x1010101010101
        elif not (p & 0x10101010101) ^ 0x10101010101:
            p_stables |= 0x10101010101
        elif not (p & 0x101010101) ^ 0x101010101:
            p_stables |= 0x101010101
        elif not (p & 0x1010101) ^ 0x1010101:
            p_stables |= 0x1010101
        elif not (p & 0x10101) ^ 0x10101:
            p_stables |= 0x10101
        elif not (p & 0x101) ^ 0x101:
            p_stables |= 0x101
        elif not (o & 0x101010101010100) ^ 0x101010101010100:  # ooooooox to oox
            o_stables |= 0x101010101010100
        elif not (o & 0x101010101010000) ^ 0x101010101010000:
            o_stables |= 0x101010101010000
        elif not (o & 0x101010101000000) ^ 0x101010101000000:
            o_stables |= 0x101010101000000
        elif not (o & 0x101010100000000) ^ 0x101010100000000:
            o_stables |= 0x101010100000000
        elif not (o & 0x101010000000000) ^ 0x101010000000000:
            o_stables |= 0x101010000000000
        elif not (o & 0x101000000000000) ^ 0x101000000000000:
            o_stables |= 0x101000000000000
        elif not (o & 0x1010101010101) ^ 0x1010101010101:  # xooooooo to xoo
            o_stables |= 0x1010101010101
        elif not (o & 0x10101010101) ^ 0x10101010101:
            o_stables |= 0x10101010101
        elif not (o & 0x101010101) ^ 0x101010101:
            o_stables |= 0x101010101
        elif not (o & 0x1010101) ^ 0x1010101:
            o_stables |= 0x1010101
        elif not (o & 0x10101) ^ 0x10101:
            o_stables |= 0x10101
        elif not (o & 0x101) ^ 0x101:
            o_stables |= 0x101

    # tiles with all flipping direction vectors filled
    row = 0xFF00
    for i in range(6):
        if not (p | o) & row ^ row:
            col = 0x202020202020202
            for j in range(6):
                if not (p | o) & col ^ col:
                    l_r_diagonal_shift = l_r_diagonal
                    if i >= j:
                        for k in range(i - j):
                            l_r_diagonal_shift = (l_r_diagonal_shift >> shifts[0][1]) & shifts[0][0]
                    else:
                        for k in range(j - i):
                            l_r_diagonal_shift = (l_r_diagonal_shift << shifts[4][1]) & shifts[4][0]
                    r_l_diagonal_shift = r_l_diagonal
                    if i + j <= 5:
                        for k in range(5 - i - j):
                            r_l_diagonal_shift = (r_l_diagonal_shift >> shifts[0][1]) & shifts[0][0]
                    else:
                        for k in range(i + j - 5):
                            r_l_diagonal_shift = (r_l_diagonal_shift << shifts[4][1]) & shifts[4][0]
                    if not (((p | o) & l_r_diagonal_shift ^ l_r_diagonal_shift) | (
                            (p | o) & r_l_diagonal_shift ^ r_l_diagonal_shift)):
                        p_stables |= row & col & p
                        o_stables |= row & col & o
                col = (col << shifts[4][1]) & shifts[4][0]
        row = (row << shifts[6][1]) & shifts[6][0]

    # outer edge line stability
    count = bin((p | o) & top_row).count('1')
    if count == 7:
        bottom_shifted_p = (p & top_row) >> 56
        bottom_shifted_o = (o & top_row) >> 56
        if (bottom_shifted_p, bottom_shifted_o) in edge_configurations_7:
            p_stables |= edge_configurations_7[bottom_shifted_p, bottom_shifted_o][0] << 56
            o_stables |= edge_configurations_7[bottom_shifted_p, bottom_shifted_o][1] << 56
    elif count == 6:
        reflected = reflect_horizontal_axis(p & top_row, 0, False), reflect_horizontal_axis(o & top_row, 0, False)
        if reflected in edge_configurations_6:
            p_stables |= reflect_horizontal_axis(edge_configurations_6[reflected][0], 0, False)
            o_stables |= reflect_horizontal_axis(edge_configurations_6[reflected][1], 0, False)
        else:
            rotated = rotate_180(p & top_row, 0, False), rotate_180(o & top_row, 0, False)
            if rotated in edge_configurations_6:
                p_stables |= rotate_180(edge_configurations_6[rotated][0], 0, False)
                o_stables |= rotate_180(edge_configurations_6[rotated][1], 0, False)
    elif count == 5:
        reflected = reflect_horizontal_axis(p & top_row, 0, False), reflect_horizontal_axis(o & top_row, 0, False)
        if reflected in edge_configurations_5:
            p_stables |= reflect_horizontal_axis(edge_configurations_5[reflected][0], 0, False)
            o_stables |= reflect_horizontal_axis(edge_configurations_5[reflected][1], 0, False)
        else:
            rotated = rotate_180(p & top_row, 0, False), rotate_180(o & top_row, 0, False)
            if rotated in edge_configurations_5:
                p_stables |= rotate_180(edge_configurations_5[rotated][0], 0, False)
                o_stables |= rotate_180(edge_configurations_5[rotated][1], 0, False)

    count = bin((p | o) & bottom_row).count('1')
    if count == 7:
        if (p & bottom_row, o & bottom_row) in edge_configurations_7:
            p_stables |= edge_configurations_7[p & bottom_row, o & bottom_row][0]
            o_stables |= edge_configurations_7[p & bottom_row, o & bottom_row][1]
    elif count == 6:
        if (p & bottom_row, o & bottom_row) in edge_configurations_6:
            p_stables |= edge_configurations_6[p & bottom_row, o & bottom_row][0]
            o_stables |= edge_configurations_6[p & bottom_row, o & bottom_row][1]
        else:
            reflected = reflect_vertical_axis(p & bottom_row, 0, False), reflect_vertical_axis(o & bottom_row, 0, False)
            if reflected in edge_configurations_6:
                p_stables |= reflect_vertical_axis(edge_configurations_6[reflected][0], 0, False)
                o_stables |= reflect_vertical_axis(edge_configurations_6[reflected][1], 0, False)
    elif count == 5:
        if (p & bottom_row, o & bottom_row) in edge_configurations_5:
            p_stables |= edge_configurations_5[p & bottom_row, o & bottom_row][0]
            o_stables |= edge_configurations_5[p & bottom_row, o & bottom_row][1]
        else:
            reflected = reflect_vertical_axis(p & bottom_row, 0, False), reflect_vertical_axis(o & bottom_row, 0,
                                                                                               False)
            if reflected in edge_configurations_5:
                p_stables |= reflect_vertical_axis(edge_configurations_5[reflected][0], 0, False)
                o_stables |= reflect_vertical_axis(edge_configurations_5[reflected][1], 0, False)

    count = bin((p | o) & leftmost_column).count('1')
    if count == 7:
        bottom_shifted_p = rotate_90_ccw(p & leftmost_column, 0, False)
        bottom_shifted_o = rotate_90_ccw(o & leftmost_column, 0, False)
        if (bottom_shifted_p, bottom_shifted_o) in edge_configurations_7:
            p_stables |= rotate_90_cw(edge_configurations_7[bottom_shifted_p, bottom_shifted_o][0], 0, False)
            o_stables |= rotate_90_cw(edge_configurations_7[bottom_shifted_p, bottom_shifted_o][1], 0, False)
    elif count == 6:
        rotated = rotate_90_ccw(p & leftmost_column, 0, False), rotate_90_ccw(o & leftmost_column, 0, False)
        if rotated in edge_configurations_6:
            p_stables |= rotate_90_cw(edge_configurations_6[rotated][0], 0, False)
            o_stables |= rotate_90_cw(edge_configurations_6[rotated][1], 0, False)
        else:
            reflected = reflect_right_left_diagonal_axis(p & leftmost_column, 0,
                                                         False), reflect_right_left_diagonal_axis(o & leftmost_column,
                                                                                                  0, False)
            if reflected in edge_configurations_6:
                p_stables |= reflect_right_left_diagonal_axis(edge_configurations_6[reflected][0], 0, False)
                o_stables |= reflect_right_left_diagonal_axis(edge_configurations_6[reflected][1], 0, False)
    elif count == 5:
        rotated = rotate_90_ccw(p & leftmost_column, 0, False), rotate_90_ccw(o & leftmost_column, 0, False)
        if rotated in edge_configurations_5:
            p_stables |= rotate_90_cw(edge_configurations_5[rotated][0], 0, False)
            o_stables |= rotate_90_cw(edge_configurations_5[rotated][1], 0, False)
        else:
            reflected = reflect_right_left_diagonal_axis(p & leftmost_column, 0,
                                                         False), reflect_right_left_diagonal_axis(o & leftmost_column,
                                                                                                  0, False)
            if reflected in edge_configurations_5:
                p_stables |= reflect_right_left_diagonal_axis(edge_configurations_5[reflected][0], 0, False)
                o_stables |= reflect_right_left_diagonal_axis(edge_configurations_5[reflected][1], 0, False)

    count = bin((p | o) & rightmost_column).count('1')
    if count == 7:
        bottom_shifted_p = rotate_90_cw(p & rightmost_column, 0, False)
        bottom_shifted_o = rotate_90_cw(o & rightmost_column, 0, False)
        if (bottom_shifted_p, bottom_shifted_o) in edge_configurations_7:
            p_stables |= rotate_90_ccw(edge_configurations_7[bottom_shifted_p, bottom_shifted_o][0], 0, False)
            o_stables |= rotate_90_ccw(edge_configurations_7[bottom_shifted_p, bottom_shifted_o][1], 0, False)
    elif count == 6:
        rotated = rotate_90_cw(p & rightmost_column, 0, False), rotate_90_cw(o & rightmost_column, 0, False)
        if rotated in edge_configurations_6:
            p_stables |= rotate_90_ccw(edge_configurations_6[rotated][0], 0, False)
            o_stables |= rotate_90_ccw(edge_configurations_6[rotated][1], 0, False)
        else:
            reflected = reflect_left_right_diagonal_axis(p & rightmost_column, 0,
                                                         False), reflect_left_right_diagonal_axis(o & rightmost_column,
                                                                                                  0, False)
            if reflected in edge_configurations_6:
                p_stables |= reflect_left_right_diagonal_axis(edge_configurations_6[reflected][0], 0, False)
                o_stables |= reflect_left_right_diagonal_axis(edge_configurations_6[reflected][1], 0, False)
    elif count == 5:
        rotated = rotate_90_cw(p & rightmost_column, 0, False), rotate_90_cw(o & rightmost_column, 0, False)
        if rotated in edge_configurations_5:
            p_stables |= rotate_90_ccw(edge_configurations_5[rotated][0], 0, False)
            o_stables |= rotate_90_ccw(edge_configurations_5[rotated][1], 0, False)
        else:
            reflected = reflect_left_right_diagonal_axis(p & rightmost_column, 0,
                                                         False), reflect_left_right_diagonal_axis(o & rightmost_column,
                                                                                                  0, False)
            if reflected in edge_configurations_5:
                p_stables |= reflect_left_right_diagonal_axis(edge_configurations_5[reflected][0], 0, False)
                o_stables |= reflect_left_right_diagonal_axis(edge_configurations_5[reflected][1], 0, False)

    # all other stable tiles
    changed = True
    while changed:
        changed = False
        filled_row_p = filled_col_p = filled_l_r_d_black = filled_r_l_d_black = filled_row_o = \
            filled_col_o = filled_l_r_d_white = filled_r_l_d_white = 0
        row = 0xFF00
        for i in range(6):
            if not (p | o) & row ^ row:
                filled_row_p |= p & row
                filled_row_o |= o & row
            row <<= 8
        col = 0x202020202020202
        for i in range(6):
            if not (p | o) & col ^ col:
                filled_col_p |= p & col
                filled_col_o |= o & col
            col <<= 1
        l_r_d = l_r_diagonal
        for i in range(5):
            if not (p | o) & l_r_d ^ l_r_d:
                filled_l_r_d_black |= p & l_r_d
                filled_l_r_d_white |= o & l_r_d
            l_r_d = (l_r_d << shifts[4][1]) & shifts[4][0]
        l_r_d = (l_r_diagonal >> shifts[0][1]) & shifts[0][0]
        for i in range(4):
            if not (p | o) & l_r_d ^ l_r_d:
                filled_l_r_d_black |= p & l_r_d
                filled_l_r_d_white |= o & l_r_d
            l_r_d = (l_r_d >> shifts[0][1]) & shifts[0][0]
        r_l_d = r_l_diagonal
        for i in range(5):
            if not (p | o) & r_l_d ^ r_l_d:
                filled_r_l_d_black |= p & r_l_d
                filled_r_l_d_white |= o & r_l_d
            r_l_d = (r_l_d >> shifts[0][1]) & shifts[0][0]
        r_l_d = (r_l_diagonal << shifts[4][1]) & shifts[4][0]
        for i in range(4):
            if not (p | o) & r_l_d ^ r_l_d:
                filled_r_l_d_black |= p & r_l_d
                filled_r_l_d_white |= o & r_l_d
            r_l_d = (r_l_d << shifts[4][1]) & shifts[4][0]
        temp_p = p_stables | (filled_row_p | ((p_stables >> shifts[0][1]) & shifts[0][0]) & p | (
                (p_stables << shifts[4][1]) & shifts[4][0]) & p) & (
                             filled_col_p | ((p_stables >> shifts[2][1]) & shifts[2][0]) & p | (
                             (p_stables << shifts[6][1]) & shifts[6][0]) & p) & (
                             filled_l_r_d_black | ((p_stables >> shifts[1][1]) & shifts[1][0]) & p | (
                             (p_stables << shifts[5][1]) & shifts[5][0]) & p) & (
                             filled_r_l_d_black | ((p_stables >> shifts[3][1]) & shifts[3][0]) & p | (
                             (p_stables << shifts[7][1]) & shifts[7][0]) & p)
        temp_o = o_stables | (filled_row_o | ((o_stables >> shifts[0][1]) & shifts[0][0]) & o | (
                (o_stables << shifts[4][1]) & shifts[4][0]) & o) & (
                             filled_col_o | ((o_stables >> shifts[2][1]) & shifts[2][0]) & o | (
                             (o_stables << shifts[6][1]) & shifts[6][0]) & o) & (
                             filled_l_r_d_white | ((o_stables >> shifts[1][1]) & shifts[1][0]) & o | (
                             (o_stables << shifts[5][1]) & shifts[5][0]) & o) & (
                             filled_r_l_d_white | ((o_stables >> shifts[3][1]) & shifts[3][0]) & o | (
                             (o_stables << shifts[7][1]) & shifts[7][0]) & o)
        if temp_p ^ p_stables | temp_o ^ o_stables:
            changed = True
            p_stables = temp_p
            o_stables = temp_o
    return p_stables, o_stables


def line_stable(board, direction, index_list):
    stables = 0
    for i in range(len(index_list) - 1):
        if index_list[i + 1] - index_list[i] != 1:
            full = index_to_bit[63 - index_list[i] - direction]
            for j in range((index_list[i + 1] - index_list[i]) // direction - 2):
                full |= full << direction
            if not (full & board) ^ full:
                stables |= full
    return stables


class Strategy:
    def __init__(self):
        self.opening_flag = True
        self.opening_book = -1  # 0 for diagonal opening, 1 for perpendicular opening, 2 for parallel opening

    # implement all the required methods on your own

    def best_strategy(self, board, player, best_move, running):
        depth = 5
        start_time = time.perf_counter()
        previous_result = -1
        flag = False
        # endgame_flag = False
        empty_count = board.count('.')
        if empty_count < 13:
            # if empty_count > 12:
            #     depth = empty_count - 5
                # endgame_flag = True
            # else:
            depth = empty_count + 1
        elif empty_count == 60:
            moves = [34, 43, 56, 65]
            random.shuffle(moves)
            best_move.value = moves[0]
            return
        board = no_border(board)
        b = w = 0
        for i in range(len(board)):
            if board[i] == '@':
                b |= index_to_bit[i]
            elif board[i] == 'o':
                w |= index_to_bit[i]
        if self.opening_flag and empty_count > 37:
            for direction in range(8):
                found = opening_finder(direction, b, w, 0, False)
                result = openings[(found[0], found[1])] if (found[0], found[1]) in openings else []
                if len(result) > 0:
                    random.shuffle(result)
                    best_move.value = opening_finder(direction, 0, 0, result[0], True)
                    return
        self.opening_flag = False
        while running.value:
            # time.sleep(1)
            if depth >= empty_count:
                flag = True
            if player == '@':
                res = initial_negascout(b, w, 1, depth, -float('inf'), float('inf'), previous_result)[0]
            else:
                res = initial_negascout(w, b, 1, depth, -float('inf'), float('inf'), previous_result)[0]
            best_move.value = 10 * (res // 8 + 1) + res % 8 + 1
            print(depth)
            previous_result = res
            if flag:
                return
            # if time.perf_counter() - start_time < 1:
                # depth = empty_count + 1 if endgame_flag else depth + 1  # 2
            # else:
            depth += 1


# board = '\
# oo.o@o@o\
# o......@\
# @......@\
# @......@\
# o......@\
# o......o\
# ........\
# .oo@@o@.'

# board = '\
# ........\
# ........\
# ...@o...\
# ...@@o@.\
# ...@@@@@\
# ...ooo@.\
# ....oo..\
# .....o..'

# board = '???????????..ooooo.??@.oooo..??@@@@@oo.??@@@oo@oo??@@o@@@@o??@@@o@@@o??..o@@@..??.o.@@@@.???????????'
# board = no_border(board)
#
# b = w = 0
# for i in range(len(board)):
#     if board[i] == '@':
#         b |= index_to_bit[i]
#     elif board[i] == 'o':
#         w |= index_to_bit[i]
# print_puzzle(b, w)
# s = get_stability(b, w)
# print_puzzle(s[0], s[1])
# start = time.perf_counter()
# print(len(edge_configurations_5))
# for a in edge_configurations_5:
#   print_puzzle(a[0], a[1])
# res = initial_negascout(b, w, 1, 13, -float('inf'), float('inf'), -1)
# print(time.perf_counter() - start)
# print(res)
# moved = move(b, w, 60)
# print_puzzle(moved[0], moved[1])
# print(moved)
#
# print(bin(moved[0] & w).count('1'))
# print(bin(neighbors[60] & moved[0] & w).count('1'))
# for direction in range(8):
#     directions |= shift(, direction)
# print(len(transposition_table))
# # print(cc)

# print('{', end='')
# a = 1
# while a <= 0b1:
#   aa = 1
#   while aa <= 0b111111:
#     w = (a << 7) + aa
#     b = ((0b1 - a) << 7) + 0b111111 - aa
#     # print_puzzle(b, w)
#     tile = 1
#     bottom_row_tiles = (b | w) & bottom_row
#     # print_puzzle(b, w)
#     bottom_row_tile_list_black = []
#     bottom_row_tile_list_white = []
#     for i in range(8):
#         if tile & b & bottom_row_tiles:
#             bottom_row_tile_list_black.append(i)
#         elif tile & w & bottom_row_tiles:
#             bottom_row_tile_list_white.append(i)
#         tile <<= 1
#     b_stables = line_stable(b, 1, bottom_row_tile_list_white)
#     w_stables = line_stable(w, 1, bottom_row_tile_list_black)
#     if b_stables or w_stables:
#       # print_puzzle(b, w)
#       # print_puzzle(b_stables, w_stables)
#       print('(' + hex(b)[:2] + hex(b)[2:].upper() + ', ' + hex(w)[:2] + hex(w)[2:].upper() + '): ' + '(' + hex(b_stables)[:2] + hex(b_stables)[2:].upper() + ', ' + hex(w_stables)[:2] + hex(w_stables)[2:].upper() + '), ', end='')
#     aa += 1
#   a += 1

# a = 1
# while a <= 0b111111:
#   w = a << 1
#   b = (0b111111 - a) << 1
#   # print_puzzle(b, w)
#   tile = 1
#   bottom_row_tiles = (b | w) & bottom_row
#   # print_puzzle(b, w)
#   bottom_row_tile_list_black = []
#   bottom_row_tile_list_white = []
#   for i in range(8):
#       if tile & b & bottom_row_tiles:
#           bottom_row_tile_list_black.append(i)
#       elif tile & w & bottom_row_tiles:
#           bottom_row_tile_list_white.append(i)
#       tile <<= 1
#   b_stables = line_stable(b, 1, bottom_row_tile_list_white)
#   w_stables = line_stable(w, 1, bottom_row_tile_list_black)
#   if b_stables or w_stables:
#     # print_puzzle(b, w)
#     # print_puzzle(b_stables, w_stables)
#     print('(' + hex(b)[:2] + hex(b)[2:].upper() + ', ' + hex(w)[:2] + hex(w)[2:].upper() + '): ' + '(' + hex(b_stables)[:2] + hex(b_stables)[2:].upper() + ', ' + hex(w_stables)[:2] + hex(w_stables)[2:].upper() + '), ', end='')
#   a += 1
# print('}')


# print('{', end='')
# for i in range(64):
#     shifted = 0
#     bit = index_to_bit[i]
#     for j in range(8):
#         if not (i < 8 and j == 6) and not (i >= 56 and j == 2) and not (i % 8 == 0 and j == 4) and not (
#                 i % 8 == 7 and j == 0):
#             shifted |= shift(bit, j)
#     # print_puzzle(bit, shifted)
#     print('%(bit)d: ' % {'bit': i} + hex(shifted)[:2] + hex(shifted)[2:].upper() + ', ', end='')
# print('}')
